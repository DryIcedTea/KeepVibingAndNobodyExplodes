<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/ButtplugManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ButtplugManager.cs" />
              <option name="originalContent" value="using System;&#10;using System.Collections.Generic;&#10;using System.Linq;&#10;using UnityEngine;&#10;using BepInEx.Logging;&#10;using KeepVibingAndNobodyExplodes.Buttplug;&#10;using KeepVibingAndNobodyExplodes.Buttplug.Settings;&#10;&#10;namespace KeepVibingAndNobodyExplodes&#10;{&#10;    public class ButtplugManager : MonoBehaviour&#10;    {&#10;        private ButtplugWsClient client;&#10;        private ManualLogSource logger;&#10;        &#10;        private Dictionary&lt;string, Coroutine&gt; activeVibrationCoroutines = new Dictionary&lt;string, Coroutine&gt;();&#10;        &#10;        public bool IsConnected =&gt; client != null &amp;&amp; client.IsConnected;&#10;        public List&lt;Device&gt; Devices =&gt; client?.Devices ?? new List&lt;Device&gt;();&#10;        &#10;        public event EventHandler&lt;DeviceListEventArgs&gt; OnDeviceListUpdated;&#10;&#10;        public void Initialize(ManualLogSource logSource)&#10;        {&#10;            logger = logSource;&#10;            &#10;            &#10;            client = gameObject.AddComponent&lt;ButtplugWsClient&gt;();&#10;            client.OnDeviceListUpdated += (sender, args) =&gt;&#10;            {&#10;                logger.LogInfo($&quot;Device list updated: {args.After.Count} devices found&quot;);&#10;                OnDeviceListUpdated?.Invoke(sender, args);&#10;            };&#10;        }&#10;&#10;        public void Connect()&#10;        {&#10;            if (client != null)&#10;            {&#10;                client.Connect(Plugin.IntifaceHost, Plugin.IntifacePort);&#10;            }&#10;        }&#10;&#10;        public void Disconnect()&#10;        {&#10;            if (client != null)&#10;            {&#10;                client.Close();&#10;            }&#10;        }&#10;&#10;        public void StartScanning()&#10;        {&#10;            if (client != null &amp;&amp; client.IsConnected)&#10;            {&#10;                client.StartScan();&#10;                logger.LogInfo(&quot;Started scanning for devices&quot;);&#10;            }&#10;            else&#10;            {&#10;                logger.LogWarning(&quot;Cannot start scanning - not connected to Intiface&quot;);&#10;            }&#10;        }&#10;&#10;        public void StopAllDevices()&#10;        {&#10;            if (client != null)&#10;            {&#10;                client.StopAllDevices();&#10;                logger.LogInfo(&quot;Stopped all devices&quot;);&#10;            }&#10;        }&#10;&#10;        public void VibrateDevice(string deviceName, float intensity, float duration = 0)&#10;        {&#10;            var device = Devices.FirstOrDefault(d =&gt; d.DeviceName.Contains(deviceName));&#10;            if (device == null)&#10;            {&#10;                logger.LogWarning($&quot;Device not found: {deviceName}&quot;);&#10;                return;&#10;            }&#10;&#10;            var vibratorFeatures = GetVibratorFeatures(device);&#10;            foreach (var feature in vibratorFeatures)&#10;            {&#10;                client.VibrateCmd(feature, intensity);&#10;            }&#10;&#10;            if (duration &gt; 0)&#10;            {&#10;                // Stop vibration after duration&#10;                if (activeVibrationCoroutines.TryGetValue(deviceName, out var existingCoroutine))&#10;                {&#10;                    StopCoroutine(existingCoroutine);&#10;                }&#10;                var coroutine = StartCoroutine(StopVibrateAfterDelay(device, duration));&#10;                activeVibrationCoroutines[deviceName] = coroutine;&#10;            }&#10;        }&#10;&#10;        public void StrokeDevice(string deviceName, float position, float duration)&#10;        {&#10;            var device = Devices.FirstOrDefault(d =&gt; d.DeviceName.Contains(deviceName));&#10;            if (device == null)&#10;            {&#10;                logger.LogWarning($&quot;Device not found: {deviceName}&quot;);&#10;                return;&#10;            }&#10;&#10;            var strokerFeatures = GetStrokerFeatures(device);&#10;            foreach (var feature in strokerFeatures)&#10;            {&#10;                client.LinearCmd(feature, position, duration);&#10;            }&#10;        }&#10;&#10;        private System.Collections.IEnumerator StopVibrateAfterDelay(Device device, float delay)&#10;        {&#10;            yield return new WaitForSeconds(delay);&#10;            &#10;            var vibratorFeatures = GetVibratorFeatures(device);&#10;            foreach (var feature in vibratorFeatures)&#10;            {&#10;                client.VibrateCmd(feature, 0);&#10;            }&#10;            &#10;            // Clean up the tracking dictionary&#10;            activeVibrationCoroutines.Remove(device.DeviceName);&#10;        }&#10;&#10;        private List&lt;DeviceFeature&gt; GetVibratorFeatures(Device device)&#10;        {&#10;            var features = new List&lt;DeviceFeature&gt;();&#10;            for (int i = 0; i &lt; device.DeviceMessages.ScalarCmd.Length; i++)&#10;            {&#10;                var feature = device.DeviceMessages.ScalarCmd[i];&#10;                if (feature.IsVibrator)&#10;                {&#10;                    var settings = i &lt; device.Settings.ScalarCmdSettings.Length &#10;                        ? device.Settings.ScalarCmdSettings[i] &#10;                        : new FeatureSettings();&#10;                    features.Add(new DeviceFeature(device, i, feature, settings));&#10;                }&#10;            }&#10;            return features;&#10;        }&#10;&#10;        private List&lt;DeviceFeature&gt; GetStrokerFeatures(Device device)&#10;        {&#10;            var features = new List&lt;DeviceFeature&gt;();&#10;            for (int i = 0; i &lt; device.DeviceMessages.LinearCmd.Length; i++)&#10;            {&#10;                var feature = device.DeviceMessages.LinearCmd[i];&#10;                var settings = i &lt; device.Settings.LinearCmdSettings.Length &#10;                    ? device.Settings.LinearCmdSettings[i] &#10;                    : new FeatureSettings();&#10;                features.Add(new DeviceFeature(device, i, feature, settings));&#10;            }&#10;            return features;&#10;        }&#10;&#10;        public void LogDeviceInfo()&#10;        {&#10;            if (!IsConnected)&#10;            {&#10;                logger.LogInfo(&quot;Not connected to Intiface server&quot;);&#10;                return;&#10;            }&#10;&#10;            logger.LogInfo($&quot;Connected devices: {Devices.Count}&quot;);&#10;            foreach (var device in Devices)&#10;            {&#10;                logger.LogInfo($&quot;  Device: {device.DeviceName} (Index: {device.DeviceIndex})&quot;);&#10;                logger.LogInfo($&quot;    Vibrators: {device.DeviceMessages.ScalarCmd.Count(f =&gt; f.IsVibrator)}&quot;);&#10;                logger.LogInfo($&quot;    Strokers: {device.DeviceMessages.LinearCmd.Length}&quot;);&#10;                logger.LogInfo($&quot;    Rotators: {device.DeviceMessages.RotateCmd.Length}&quot;);&#10;                if (device.HasBatteryLevel)&#10;                {&#10;                    logger.LogInfo($&quot;    Battery: {device.BatteryLevel * 100:F0}%&quot;);&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Collections.Generic;&#10;using System.Linq;&#10;using UnityEngine;&#10;using BepInEx.Logging;&#10;using KeepVibingAndNobodyExplodes.Buttplug;&#10;using KeepVibingAndNobodyExplodes.Buttplug.Settings;&#10;&#10;namespace KeepVibingAndNobodyExplodes&#10;{&#10;    public class ButtplugManager : MonoBehaviour&#10;    {&#10;        private ButtplugWsClient client;&#10;        private ManualLogSource logger;&#10;        &#10;        private Dictionary&lt;string, Coroutine&gt; activeVibrationCoroutines = new Dictionary&lt;string, Coroutine&gt;();&#10;        &#10;        public bool IsConnected =&gt; client != null &amp;&amp; client.IsConnected;&#10;        public List&lt;Device&gt; Devices =&gt; client?.Devices ?? new List&lt;Device&gt;();&#10;        &#10;        public event EventHandler&lt;DeviceListEventArgs&gt; OnDeviceListUpdated;&#10;&#10;        public void Initialize(ManualLogSource logSource)&#10;        {&#10;            logger = logSource;&#10;            &#10;            &#10;            client = gameObject.AddComponent&lt;ButtplugWsClient&gt;();&#10;            client.OnDeviceListUpdated += (sender, args) =&gt;&#10;            {&#10;                logger.LogInfo($&quot;Device list updated: {args.After.Count} devices found&quot;);&#10;                OnDeviceListUpdated?.Invoke(sender, args);&#10;            };&#10;        }&#10;&#10;        public void Connect()&#10;        {&#10;            if (client != null)&#10;            {&#10;                client.Connect(Plugin.IntifaceHost, Plugin.IntifacePort);&#10;            }&#10;        }&#10;&#10;        public void Disconnect()&#10;        {&#10;            if (client != null)&#10;            {&#10;                client.Close();&#10;            }&#10;        }&#10;&#10;        public void StartScanning()&#10;        {&#10;            if (client != null &amp;&amp; client.IsConnected)&#10;            {&#10;                client.StartScan();&#10;                logger.LogInfo(&quot;Started scanning for devices&quot;);&#10;            }&#10;            else&#10;            {&#10;                logger.LogWarning(&quot;Cannot start scanning - not connected to Intiface&quot;);&#10;            }&#10;        }&#10;&#10;        public void StopAllDevices()&#10;        {&#10;            if (client != null)&#10;            {&#10;                client.StopAllDevices();&#10;                logger.LogInfo(&quot;Stopped all devices&quot;);&#10;            }&#10;        }&#10;&#10;        public void VibrateDevice(string deviceName, float intensity, float duration = 0)&#10;        {&#10;            var device = Devices.FirstOrDefault(d =&gt; d.DeviceName == deviceName);&#10;            if (device == null)&#10;            {&#10;                logger.LogWarning($&quot;Device not found: {deviceName}&quot;);&#10;                return;&#10;            }&#10;&#10;            logger.LogInfo($&quot;Attempting to vibrate device: {deviceName} at intensity {intensity}&quot;);&#10;            &#10;            var vibratorFeatures = GetVibratorFeatures(device);&#10;            logger.LogInfo($&quot;Found {vibratorFeatures.Count} vibrator features for device {deviceName}&quot;);&#10;            &#10;            if (vibratorFeatures.Count == 0)&#10;            {&#10;                logger.LogWarning($&quot;No vibrator features found for device {deviceName}&quot;);&#10;                return;&#10;            }&#10;            &#10;            foreach (var feature in vibratorFeatures)&#10;            {&#10;                logger.LogInfo($&quot;Sending vibration command to device {deviceName}, feature index {feature.FeatureIndex}&quot;);&#10;                client.VibrateCmd(feature, intensity);&#10;            }&#10;&#10;            if (duration &gt; 0)&#10;            {&#10;                // Stop vibration after duration&#10;                if (activeVibrationCoroutines.TryGetValue(deviceName, out var existingCoroutine))&#10;                {&#10;                    StopCoroutine(existingCoroutine);&#10;                }&#10;                var coroutine = StartCoroutine(StopVibrateAfterDelay(device, duration));&#10;                activeVibrationCoroutines[deviceName] = coroutine;&#10;            }&#10;        }&#10;&#10;        public void StrokeDevice(string deviceName, float position, float duration)&#10;        {&#10;            var device = Devices.FirstOrDefault(d =&gt; d.DeviceName.Contains(deviceName));&#10;            if (device == null)&#10;            {&#10;                logger.LogWarning($&quot;Device not found: {deviceName}&quot;);&#10;                return;&#10;            }&#10;&#10;            var strokerFeatures = GetStrokerFeatures(device);&#10;            foreach (var feature in strokerFeatures)&#10;            {&#10;                client.LinearCmd(feature, position, duration);&#10;            }&#10;        }&#10;&#10;        private System.Collections.IEnumerator StopVibrateAfterDelay(Device device, float delay)&#10;        {&#10;            yield return new WaitForSeconds(delay);&#10;            &#10;            var vibratorFeatures = GetVibratorFeatures(device);&#10;            foreach (var feature in vibratorFeatures)&#10;            {&#10;                client.VibrateCmd(feature, 0);&#10;            }&#10;            &#10;            // Clean up the tracking dictionary&#10;            activeVibrationCoroutines.Remove(device.DeviceName);&#10;        }&#10;&#10;        private List&lt;DeviceFeature&gt; GetVibratorFeatures(Device device)&#10;        {&#10;            var features = new List&lt;DeviceFeature&gt;();&#10;            for (int i = 0; i &lt; device.DeviceMessages.ScalarCmd.Length; i++)&#10;            {&#10;                var feature = device.DeviceMessages.ScalarCmd[i];&#10;                if (feature.IsVibrator)&#10;                {&#10;                    var settings = i &lt; device.Settings.ScalarCmdSettings.Length &#10;                        ? device.Settings.ScalarCmdSettings[i] &#10;                        : new FeatureSettings();&#10;                    features.Add(new DeviceFeature(device, i, feature, settings));&#10;                }&#10;            }&#10;            return features;&#10;        }&#10;&#10;        private List&lt;DeviceFeature&gt; GetStrokerFeatures(Device device)&#10;        {&#10;            var features = new List&lt;DeviceFeature&gt;();&#10;            for (int i = 0; i &lt; device.DeviceMessages.LinearCmd.Length; i++)&#10;            {&#10;                var feature = device.DeviceMessages.LinearCmd[i];&#10;                var settings = i &lt; device.Settings.LinearCmdSettings.Length &#10;                    ? device.Settings.LinearCmdSettings[i] &#10;                    : new FeatureSettings();&#10;                features.Add(new DeviceFeature(device, i, feature, settings));&#10;            }&#10;            return features;&#10;        }&#10;&#10;        public void LogDeviceInfo()&#10;        {&#10;            if (!IsConnected)&#10;            {&#10;                logger.LogInfo(&quot;Not connected to Intiface server&quot;);&#10;                return;&#10;            }&#10;&#10;            logger.LogInfo($&quot;Connected devices: {Devices.Count}&quot;);&#10;            foreach (var device in Devices)&#10;            {&#10;                logger.LogInfo($&quot;  Device: {device.DeviceName} (Index: {device.DeviceIndex})&quot;);&#10;                logger.LogInfo($&quot;    Vibrators: {device.DeviceMessages.ScalarCmd.Count(f =&gt; f.IsVibrator)}&quot;);&#10;                logger.LogInfo($&quot;    Strokers: {device.DeviceMessages.LinearCmd.Length}&quot;);&#10;                logger.LogInfo($&quot;    Rotators: {device.DeviceMessages.RotateCmd.Length}&quot;);&#10;                if (device.HasBatteryLevel)&#10;                {&#10;                    logger.LogInfo($&quot;    Battery: {device.BatteryLevel * 100:F0}%&quot;);&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Plugin.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Plugin.cs" />
              <option name="originalContent" value="using System;&#10;using System.Collections;&#10;using System.Collections.Generic;&#10;using System.Linq;&#10;using System.Reflection;&#10;using System.Reflection.Emit;&#10;using Assets.Scripts.Props;&#10;using DarkTonic.MasterAudio;&#10;using BepInEx;&#10;using BepInEx.Configuration;&#10;using BepInEx.Logging;&#10;using UnityEngine;&#10;using HarmonyLib;&#10;&#10;namespace KeepVibingAndNobodyExplodes;&#10;&#10;[BepInPlugin(&quot;dryicedmatcha.keepvibing&quot;, &quot;Keep Vibing And Nobody Explodes&quot;, &quot;1.0.0&quot;)]&#10;public class Plugin : BaseUnityPlugin&#10;{&#10;    internal static new ManualLogSource Logger;&#10;    private ButtplugManager buttplugManager;&#10;    private static Plugin instance;&#10;    &#10;    private const string harmonyId = &quot;com.dryicedmatcha.ktane.keepvibing&quot;;&#10;    private static Harmony harmonyInstance;&#10;    &#10;    // Configuration entries - individual module controls&#10;    private ConfigEntry&lt;bool&gt; enableWireVibration;&#10;    private ConfigEntry&lt;float&gt; wireVibrationStrength;&#10;    &#10;    // Intiface connection settings&#10;    private ConfigEntry&lt;string&gt; intifaceHost;&#10;    private ConfigEntry&lt;int&gt; intifacePort;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableStrikeVibration;&#10;    private ConfigEntry&lt;float&gt; strikeVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableExplosionVibration;&#10;    private ConfigEntry&lt;float&gt; explosionVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableModuleSolveVibration;&#10;    private ConfigEntry&lt;float&gt; moduleSolveVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableButtonVibration;&#10;    private ConfigEntry&lt;float&gt; buttonPressVibrationStrength;&#10;    private ConfigEntry&lt;float&gt; buttonReleaseVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableKeypadVibration;&#10;    private ConfigEntry&lt;float&gt; keypadVibrationBaseStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableSimonVibration;&#10;    private ConfigEntry&lt;float&gt; simonVibrationBaseStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableWhosOnFirstVibration;&#10;    private ConfigEntry&lt;float&gt; whosOnFirstVibrationBaseStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableMemoryVibration;&#10;    private ConfigEntry&lt;float&gt; memoryVibrationBaseStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableMorseVibration;&#10;    private ConfigEntry&lt;float&gt; morseVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableComplicatedWireVibration;&#10;    private ConfigEntry&lt;float&gt; complicatedWireVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableWireSequenceVibration;&#10;    private ConfigEntry&lt;float&gt; wireSequenceWireVibrationStrength;&#10;    private ConfigEntry&lt;float&gt; wireSequenceStageVibrationBaseStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableMazeVibration;&#10;    private ConfigEntry&lt;float&gt; mazeVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enablePasswordVibration;&#10;    private ConfigEntry&lt;float&gt; passwordVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableCapacitorDischargeVibration;&#10;    private ConfigEntry&lt;float&gt; capacitorDischargePushVibrationStrength;&#10;    private ConfigEntry&lt;float&gt; capacitorDischargeReleaseVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableNeedyKnobVibration;&#10;    private ConfigEntry&lt;float&gt; needyKnobVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableVentGasVibration;&#10;    private ConfigEntry&lt;float&gt; ventGasVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableAlarmClockVibration;&#10;    private ConfigEntry&lt;float&gt; alarmClockVibrationStrength;&#10;    &#10;    // Module-specific accessors&#10;    public static bool EnableWireVibration =&gt; instance?.enableWireVibration?.Value ?? true;&#10;    public static float WireVibrationStrength =&gt; instance?.wireVibrationStrength?.Value ?? 0.5f;&#10;    &#10;    public static bool EnableStrikeVibration =&gt; instance?.enableStrikeVibration?.Value ?? true;&#10;    public static float StrikeVibrationStrength =&gt; instance?.strikeVibrationStrength?.Value ?? 0.7f;&#10;    &#10;    public static bool EnableExplosionVibration =&gt; instance?.enableExplosionVibration?.Value ?? true;&#10;    public static float ExplosionVibrationStrength =&gt; instance?.explosionVibrationStrength?.Value ?? 1.0f;&#10;    &#10;    public static bool EnableModuleSolveVibration =&gt; instance?.enableModuleSolveVibration?.Value ?? true;&#10;    public static float ModuleSolveVibrationStrength =&gt; instance?.moduleSolveVibrationStrength?.Value ?? 1.0f;&#10;    &#10;    public static bool EnableButtonVibration =&gt; instance?.enableButtonVibration?.Value ?? true;&#10;    public static float ButtonPressVibrationStrength =&gt; instance?.buttonPressVibrationStrength?.Value ?? 0.4f;&#10;    public static float ButtonReleaseVibrationStrength =&gt; instance?.buttonReleaseVibrationStrength?.Value ?? 0.5f;&#10;    &#10;    public static bool EnableKeypadVibration =&gt; instance?.enableKeypadVibration?.Value ?? true;&#10;    public static float KeypadVibrationBaseStrength =&gt; instance?.keypadVibrationBaseStrength?.Value ?? 0.25f;&#10;    &#10;    public static bool EnableSimonVibration =&gt; instance?.enableSimonVibration?.Value ?? true;&#10;    public static float SimonVibrationBaseStrength =&gt; instance?.simonVibrationBaseStrength?.Value ?? 0.2f;&#10;    &#10;    public static bool EnableWhosOnFirstVibration =&gt; instance?.enableWhosOnFirstVibration?.Value ?? true;&#10;    public static float WhosOnFirstVibrationBaseStrength =&gt; instance?.whosOnFirstVibrationBaseStrength?.Value ?? 0.25f;&#10;    &#10;    public static bool EnableMemoryVibration =&gt; instance?.enableMemoryVibration?.Value ?? true;&#10;    public static float MemoryVibrationBaseStrength =&gt; instance?.memoryVibrationBaseStrength?.Value ?? 0.2f;&#10;    &#10;    public static bool EnableMorseVibration =&gt; instance?.enableMorseVibration?.Value ?? true;&#10;    public static float MorseVibrationStrength =&gt; instance?.morseVibrationStrength?.Value ?? 0.2f;&#10;    &#10;    public static bool EnableComplicatedWireVibration =&gt; instance?.enableComplicatedWireVibration?.Value ?? true;&#10;    public static float ComplicatedWireVibrationStrength =&gt; instance?.complicatedWireVibrationStrength?.Value ?? 0.5f;&#10;    &#10;    public static bool EnableWireSequenceVibration =&gt; instance?.enableWireSequenceVibration?.Value ?? true;&#10;    public static float WireSequenceWireVibrationStrength =&gt; instance?.wireSequenceWireVibrationStrength?.Value ?? 0.5f;&#10;    public static float WireSequenceStageVibrationBaseStrength =&gt; instance?.wireSequenceStageVibrationBaseStrength?.Value ?? 0.2f;&#10;    &#10;    public static bool EnableMazeVibration =&gt; instance?.enableMazeVibration?.Value ?? true;&#10;    public static float MazeVibrationStrength =&gt; instance?.mazeVibrationStrength?.Value ?? 0.3f;&#10;    &#10;    public static bool EnablePasswordVibration =&gt; instance?.enablePasswordVibration?.Value ?? true;&#10;    public static float PasswordVibrationStrength =&gt; instance?.passwordVibrationStrength?.Value ?? 0.3f;&#10;    &#10;    public static bool EnableCapacitorDischargeVibration =&gt; instance?.enableCapacitorDischargeVibration?.Value ?? true;&#10;    public static float CapacitorDischargePushVibrationStrength =&gt; instance?.capacitorDischargePushVibrationStrength?.Value ?? 0.7f;&#10;    public static float CapacitorDischargeReleaseVibrationStrength =&gt; instance?.capacitorDischargeReleaseVibrationStrength?.Value ?? 0.1f;&#10;    &#10;    public static bool EnableNeedyKnobVibration =&gt; instance?.enableNeedyKnobVibration?.Value ?? true;&#10;    public static float NeedyKnobVibrationStrength =&gt; instance?.needyKnobVibrationStrength?.Value ?? 0.2f;&#10;    &#10;    public static bool EnableVentGasVibration =&gt; instance?.enableVentGasVibration?.Value ?? true;&#10;    public static float VentGasVibrationStrength =&gt; instance?.ventGasVibrationStrength?.Value ?? 0.5f;&#10;    &#10;    public static bool EnableAlarmClockVibration =&gt; instance?.enableAlarmClockVibration?.Value ?? true;&#10;    public static float AlarmClockVibrationStrength =&gt; instance?.alarmClockVibrationStrength?.Value ?? 1.0f;&#10;    &#10;    // Intiface connection accessors&#10;    public static string IntifaceHost =&gt; instance?.intifaceHost?.Value ?? &quot;127.0.0.1&quot;;&#10;    public static int IntifacePort =&gt; instance?.intifacePort?.Value ?? 12345;&#10;    &#10;    private void Awake()&#10;    {&#10;        // Initialize configuration&#10;        enableWireVibration = Config.Bind(&quot;Wire&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Wire module&quot;);&#10;        &#10;        wireVibrationStrength = Config.Bind(&quot;Wire&quot;, &#10;                                                 &quot;VibrationStrength&quot;, &#10;                                                 0.5f, &#10;                                                 &quot;Strength of the vibration for the Wire module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableStrikeVibration = Config.Bind(&quot;General&quot;, &#10;                                     &quot;EnableStrikeVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations when the bomb receives a strike&quot;);&#10;        &#10;        strikeVibrationStrength = Config.Bind(&quot;General&quot;, &#10;                                                 &quot;StrikeVibrationStrength&quot;, &#10;                                                 0.7f, &#10;                                                 &quot;Strength of the vibration when the bomb receives a strike (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableExplosionVibration = Config.Bind(&quot;General&quot;, &#10;                                     &quot;EnableExplosionVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations when the bomb explodes&quot;);&#10;        &#10;        explosionVibrationStrength = Config.Bind(&quot;General&quot;, &#10;                                                 &quot;ExplosionVibrationStrength&quot;, &#10;                                                 1.0f, &#10;                                                 &quot;Strength of the vibration when the bomb explodes (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableModuleSolveVibration = Config.Bind(&quot;General&quot;, &#10;                                     &quot;EnableModuleSolveVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations when a module is solved&quot;);&#10;        &#10;        moduleSolveVibrationStrength = Config.Bind(&quot;General&quot;, &#10;                                                 &quot;ModuleSolveVibrationStrength&quot;, &#10;                                                 1.0f, &#10;                                                 &quot;Strength of the vibration when a module is solved (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableButtonVibration = Config.Bind(&quot;Button&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for button presses&quot;);&#10;        &#10;        buttonPressVibrationStrength = Config.Bind(&quot;Button&quot;, &#10;                                                 &quot;PressVibrationStrength&quot;, &#10;                                                 0.4f, &#10;                                                 &quot;Strength of the vibration when a button is pressed (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        buttonReleaseVibrationStrength = Config.Bind(&quot;Button&quot;, &#10;                                                 &quot;ReleaseVibrationStrength&quot;, &#10;                                                 0.5f, &#10;                                                 &quot;Strength of the vibration when a button is released (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableKeypadVibration = Config.Bind(&quot;Keypad&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Keypad module&quot;);&#10;        &#10;        keypadVibrationBaseStrength = Config.Bind(&quot;Keypad&quot;, &#10;                                                 &quot;VibrationBaseStrength&quot;, &#10;                                                 0.25f, &#10;                                                 &quot;Base strength of the vibration for the Keypad module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableSimonVibration = Config.Bind(&quot;Simon&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Simon Says module&quot;);&#10;        &#10;        simonVibrationBaseStrength = Config.Bind(&quot;Simon&quot;, &#10;                                                 &quot;VibrationBaseStrength&quot;, &#10;                                                 0.2f, &#10;                                                 &quot;Base strength of the vibration for the Simon Says module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableWhosOnFirstVibration = Config.Bind(&quot;WhosOnFirst&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Who's On First module&quot;);&#10;        &#10;        whosOnFirstVibrationBaseStrength = Config.Bind(&quot;WhosOnFirst&quot;, &#10;                                                 &quot;VibrationBaseStrength&quot;, &#10;                                                 0.25f, &#10;                                                 &quot;Base strength of the vibration for the Who's On First module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableMemoryVibration = Config.Bind(&quot;Memory&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Memory module&quot;);&#10;        &#10;        memoryVibrationBaseStrength = Config.Bind(&quot;Memory&quot;, &#10;                                                 &quot;VibrationBaseStrength&quot;, &#10;                                                 0.2f, &#10;                                                 &quot;Base strength of the vibration for the Memory module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableMorseVibration = Config.Bind(&quot;Morse&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Morse Code module&quot;);&#10;        &#10;        morseVibrationStrength = Config.Bind(&quot;Morse&quot;, &#10;                                                 &quot;VibrationStrength&quot;, &#10;                                                 0.2f, &#10;                                                 &quot;Strength of the vibration for the Morse Code module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableComplicatedWireVibration = Config.Bind(&quot;ComplicatedWire&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Complicated Wire module&quot;);&#10;        &#10;        complicatedWireVibrationStrength = Config.Bind(&quot;ComplicatedWire&quot;, &#10;                                                 &quot;VibrationStrength&quot;, &#10;                                                 0.5f, &#10;                                                 &quot;Strength of the vibration for the Complicated Wire module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableWireSequenceVibration = Config.Bind(&quot;WireSequence&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Wire Sequence module&quot;);&#10;        &#10;        wireSequenceWireVibrationStrength = Config.Bind(&quot;WireSequence&quot;, &#10;                                                 &quot;WireVibrationStrength&quot;, &#10;                                                 0.5f, &#10;                                                 &quot;Strength of the vibration for wire snips in the Wire Sequence module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        wireSequenceStageVibrationBaseStrength = Config.Bind(&quot;WireSequence&quot;, &#10;                                                 &quot;StageVibrationBaseStrength&quot;, &#10;                                                 0.2f, &#10;                                                 &quot;Base strength of the vibration for stage transitions in the Wire Sequence module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableMazeVibration = Config.Bind(&quot;Maze&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Maze module&quot;);&#10;        &#10;        mazeVibrationStrength = Config.Bind(&quot;Maze&quot;, &#10;                                                 &quot;VibrationStrength&quot;, &#10;                                                 0.3f, &#10;                                                 &quot;Strength of the vibration for the Maze module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enablePasswordVibration = Config.Bind(&quot;Password&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Password module&quot;);&#10;        &#10;        passwordVibrationStrength = Config.Bind(&quot;Password&quot;, &#10;                                                 &quot;VibrationStrength&quot;, &#10;                                                 0.3f, &#10;                                                 &quot;Strength of the vibration for the Password module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableCapacitorDischargeVibration = Config.Bind(&quot;CapacitorDischarge&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Capacitor Discharge module&quot;);&#10;        &#10;        capacitorDischargePushVibrationStrength = Config.Bind(&quot;CapacitorDischarge&quot;, &#10;                                                 &quot;PushVibrationStrength&quot;, &#10;                                                 0.7f, &#10;                                                 &quot;Strength of the vibration when pushing the capacitor in the Capacitor Discharge module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        capacitorDischargeReleaseVibrationStrength = Config.Bind(&quot;CapacitorDischarge&quot;, &#10;                                                 &quot;ReleaseVibrationStrength&quot;, &#10;                                                 0.1f, &#10;                                                 &quot;Strength of the vibration when releasing the capacitor in the Capacitor Discharge module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableNeedyKnobVibration = Config.Bind(&quot;NeedyKnob&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Needy Knob module&quot;);&#10;        &#10;        needyKnobVibrationStrength = Config.Bind(&quot;NeedyKnob&quot;, &#10;                                                 &quot;VibrationStrength&quot;, &#10;                                                 0.2f, &#10;                                                 &quot;Strength of the vibration for the Needy Knob module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableVentGasVibration = Config.Bind(&quot;VentGas&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Venting Gas module&quot;);&#10;        &#10;        ventGasVibrationStrength = Config.Bind(&quot;VentGas&quot;, &#10;                                                 &quot;VibrationStrength&quot;, &#10;                                                 0.5f, &#10;                                                 &quot;Strength of the vibration for the Venting Gas module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableAlarmClockVibration = Config.Bind(&quot;AlarmClock&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Alarm Clock module&quot;);&#10;        &#10;        alarmClockVibrationStrength = Config.Bind(&quot;AlarmClock&quot;, &#10;                                                 &quot;VibrationStrength&quot;, &#10;                                                 1.0f, &#10;                                                 &quot;Strength of the vibration for the Alarm Clock module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        intifaceHost = Config.Bind(&quot;Intiface&quot;, &#10;                                     &quot;Host&quot;, &#10;                                     &quot;127.0.0.1&quot;, &#10;                                     &quot;Host address for Intiface server&quot;);&#10;        &#10;        intifacePort = Config.Bind(&quot;Intiface&quot;, &#10;                                     &quot;Port&quot;, &#10;                                     12345, &#10;                                     &quot;Port number for Intiface server&quot;);&#10;        &#10;        // Plugin startup logic&#10;        Logger = base.Logger;&#10;        Logger.LogInfo($&quot;Plugin {&quot;Keep Vibing and Nobody Explodes&quot;} is loaded!&quot;);&#10;        &#10;        instance = this;&#10;        &#10;        InitializeButtplug();&#10;        &#10;        ApplyHarmonyPatches();&#10;    }&#10;    &#10;    private void ApplyHarmonyPatches()&#10;    {&#10;        if (harmonyInstance == null)&#10;        {&#10;            harmonyInstance = new Harmony(harmonyId);&#10;        }&#10;        &#10;        harmonyInstance.PatchAll();&#10;        Logger.LogInfo(&quot;Harmony patches applied.&quot;);&#10;    }&#10;    &#10;    private void InitializeButtplug()&#10;    {&#10;        &#10;        var buttplugObject = new GameObject(&quot;ButtplugManager&quot;);&#10;        DontDestroyOnLoad(buttplugObject);&#10;        &#10;        &#10;        buttplugManager = buttplugObject.AddComponent&lt;ButtplugManager&gt;();&#10;        buttplugManager.Initialize(Logger);&#10;        &#10;        &#10;        buttplugManager.OnDeviceListUpdated += (sender, args) =&gt;&#10;        {&#10;            Logger.LogInfo($&quot;Devices updated: {args.After.Count} devices connected&quot;);&#10;            buttplugManager.LogDeviceInfo();&#10;        };&#10;        &#10;        Logger.LogInfo(&quot;ButtplugManager initialized. Use 'buttplugManager.Connect()' to connect to Intiface.&quot;);&#10;    }&#10;    &#10;    private void Start()&#10;    {&#10;        &#10;        if (buttplugManager != null)&#10;        {&#10;            Logger.LogInfo(&quot;Attempting to connect to Intiface server...&quot;);&#10;            buttplugManager.Connect();&#10;        }&#10;    }&#10;    &#10;    public void TestVibration()&#10;    {&#10;        if (buttplugManager != null &amp;&amp; buttplugManager.IsConnected)&#10;        {&#10;            &#10;            var devices = buttplugManager.Devices;&#10;            if (devices.Count &gt; 0)&#10;            {&#10;                Logger.LogInfo(&quot;Testing vibration for 2 seconds...&quot;);&#10;                buttplugManager.VibrateDevice(devices[0].DeviceName, 0.5f, 2.0f);&#10;            }&#10;            else&#10;            {&#10;                Logger.LogInfo(&quot;No devices available for testing&quot;);&#10;            }&#10;        }&#10;        else&#10;        {&#10;            Logger.LogInfo(&quot;Not connected to Intiface server&quot;);&#10;        }&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Vibrates all connected vibrator devices&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;power&quot;&gt;Vibration power (0.0 to 1.0)&lt;/param&gt;&#10;    /// &lt;param name=&quot;duration&quot;&gt;Duration in seconds&lt;/param&gt;&#10;    public void VibrateAllDevices(float power, float duration)&#10;    {&#10;        // Power is now set directly by the patches, no multiplier needed&#10;        float clampedPower = Mathf.Clamp01(power);&#10;        &#10;        if (buttplugManager != null &amp;&amp; buttplugManager.IsConnected)&#10;        {&#10;            var devices = buttplugManager.Devices;&#10;            if (devices.Count &gt; 0)&#10;            {&#10;                Logger.LogInfo($&quot;Vibrating {devices.Count} devices at {clampedPower} power for {duration} seconds&quot;);&#10;                foreach (var device in devices)&#10;                {&#10;                    buttplugManager.VibrateDevice(device.DeviceName, clampedPower, duration);&#10;                }&#10;            }&#10;            else&#10;            {&#10;                Logger.LogInfo(&quot;No devices available for vibration&quot;);&#10;            }&#10;        }&#10;        else&#10;        {&#10;            Logger.LogInfo(&quot;Not connected to Intiface server&quot;);&#10;        }&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Static access to vibrate devices from Harmony patches&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;power&quot;&gt;Vibration power (0.0 to 1.0)&lt;/param&gt;&#10;    /// &lt;param name=&quot;duration&quot;&gt;Duration in seconds&lt;/param&gt;&#10;    /// &lt;param name=&quot;frameDelay&quot;&gt;Number of frames to delay (0 for no delay)&lt;/param&gt;&#10;    public static void TriggerVibration(float power, float duration, int frameDelay = 0)&#10;    {&#10;        // No global check needed, patches handle their own enable/disable&#10;        if (frameDelay &gt; 0)&#10;        {&#10;            instance?.StartCoroutine(TriggerVibrationDelayed(power, duration, frameDelay));&#10;        }&#10;        else&#10;        {&#10;            instance?.VibrateAllDevices(power, duration);&#10;        }&#10;    }&#10;    private static IEnumerator TriggerVibrationDelayed(float power, float duration, int frameDelay)&#10;    {&#10;        for (int i = 0; i &lt; frameDelay; i++)&#10;        {&#10;            yield return null; // Wait for one frame&#10;        }&#10;        instance?.VibrateAllDevices(power, duration);&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// Vibration when regular wire is cut. WIRE MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(SnippableWire), &quot;Interact&quot;)]&#10;public class WireSnipVibrationPatch&#10;{&#10;    [HarmonyPrefix]&#10;    public static void Prefix(SnippableWire __instance, out bool __state)&#10;    {&#10;        __state = __instance.Snipped;&#10;    }&#10;    &#10;    [HarmonyPostfix]&#10;    public static void Postfix(SnippableWire __instance, bool __state)&#10;    {&#10;        if (!Plugin.EnableWireVibration) return;&#10;        &#10;        bool wasSnippedBeforeInteract = __state;&#10;        bool isSnippedAfterInteract = __instance.Snipped;&#10;&#10;        if (!wasSnippedBeforeInteract &amp;&amp; isSnippedAfterInteract)&#10;        {&#10;            Plugin.TriggerVibration(Plugin.WireVibrationStrength, 0.1f);&#10;        }&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// Vibration when you get a strike.&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(Bomb), &quot;OnStrike&quot;)]&#10;[HarmonyPriority(Priority.Low)]&#10;public class StrikeVibrationPatch&#10;{&#10;    [HarmonyPostfix]&#10;    public static void Postfix()&#10;    {&#10;        if (!Plugin.EnableStrikeVibration) return;&#10;        &#10;        Plugin.TriggerVibration(Plugin.StrikeVibrationStrength, 0.5f, 1);&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// VIBRATION WHEN BOMB DETONATES&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(Bomb), &quot;Detonate&quot;)]&#10;[HarmonyPriority(Priority.Last)]&#10;public class ExplosionVibrationPatch&#10;{&#10;    [HarmonyPostfix]&#10;    public static void Postfix()&#10;    {&#10;        if (!Plugin.EnableExplosionVibration) return;&#10;        &#10;        Plugin.TriggerVibration(Plugin.ExplosionVibrationStrength, 3.0f, 2);&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// Vibration when Module is Solved&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(Bomb), &quot;OnPass&quot;)]&#10;public class ModuleSolveVibrationPatch&#10;{&#10;    [HarmonyPostfix]&#10;    public static void Postfix()&#10;    {&#10;        if (!Plugin.EnableModuleSolveVibration) return;&#10;        &#10;        Plugin.TriggerVibration(Plugin.ModuleSolveVibrationStrength, 0.1f);&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// VIBRATION ON THE BUTTON MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(PressableButton))]&#10;public class BigButtonHapticPatch&#10;{&#10;&#10;    [HarmonyPostfix]&#10;    [HarmonyPatch(&quot;Interact&quot;)]&#10;    public static void PressPostfix()&#10;    {&#10;        if (!Plugin.EnableButtonVibration) return;&#10;        &#10;        Plugin.TriggerVibration(Plugin.ButtonPressVibrationStrength, 500.0f);&#10;    }&#10;    &#10;    [HarmonyPrefix]&#10;    [HarmonyPatch(&quot;InteractEnded&quot;)]&#10;    public static void ReleasePrefix(PressableButton __instance)&#10;    {&#10;        if (!Plugin.EnableButtonVibration) return;&#10;        &#10;        if (__instance.IsInteracting())&#10;        {&#10;            Plugin.TriggerVibration(Plugin.ButtonReleaseVibrationStrength, 0.1f);&#10;        }&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// VIBRATION ON KEYPAD MODULE AKA SYMBOLS MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(KeypadComponent), &quot;ButtonDown&quot;)]&#10;public class KeypadHapticPatch&#10;{&#10;    &#10;    //Check how many buttons are alredy pressed&#10;    [HarmonyPrefix]&#10;    public static void Prefix(KeypadComponent __instance, out int __state)&#10;    {&#10;        int correctButtonsPressed = 0;&#10;        foreach (var button in __instance.buttons)&#10;        {&#10;            if (button.IsStayingDown)&#10;            {&#10;                correctButtonsPressed++;&#10;            }&#10;        }&#10;        __state = correctButtonsPressed;&#10;    }&#10;    &#10;    [HarmonyPostfix]&#10;    public static void Postfix(bool __result, int __state)&#10;    {&#10;        if (!Plugin.EnableKeypadVibration || !__result) return;&#10;        &#10;        int correctButtonsPressedBeforeThisOne = __state;&#10;        &#10;        float power = Plugin.KeypadVibrationBaseStrength + (correctButtonsPressedBeforeThisOne * 0.25f);&#10;        &#10;        power = Mathf.Clamp(power, Plugin.KeypadVibrationBaseStrength, 1.0f);&#10;&#10;        Plugin.TriggerVibration(power, 0.3f);&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// SIMON SAYS MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(SimonComponent), &quot;ButtonDown&quot;)]&#10;public class SimonSaysHapticPatch&#10;{&#10;    private const float DURATION = 0.5f;&#10;    &#10;    private static readonly FieldInfo solveProgressField = AccessTools.Field(typeof(SimonComponent), &quot;solveProgress&quot;);&#10;    private static readonly FieldInfo currentSequenceField = AccessTools.Field(typeof(SimonComponent), &quot;currentSequence&quot;);&#10;    &#10;    [HarmonyPrefix]&#10;    public static void Prefix(SimonComponent __instance, int index)&#10;    {&#10;        if (!Plugin.EnableSimonVibration) return;&#10;        &#10;        if (__instance.IsSolved || !__instance.IsActive)&#10;        {&#10;            return;&#10;        }&#10;        &#10;        int solveProgress = (int)solveProgressField.GetValue(__instance);&#10;        int[] currentSequence = (int[])currentSequenceField.GetValue(__instance);&#10;        &#10;        if (__instance.MapToSolution(currentSequence[solveProgress]) == index)&#10;        {&#10;            float power = Plugin.SimonVibrationBaseStrength + (solveProgress * 0.2f);&#10;            power = Mathf.Clamp(power, Plugin.SimonVibrationBaseStrength, 1.0f);&#10;&#10;            Plugin.TriggerVibration(power, DURATION);&#10;        }&#10;    }&#10;}&#10;&#10;[HarmonyPatch(typeof(WhosOnFirstComponent), &quot;ButtonDown&quot;)]&#10;public class WhosOnFirstHapticPatch&#10;{&#10;    private const float DURATION = 1.0f;&#10;    &#10;    private static readonly FieldInfo currentStageField = AccessTools.Field(typeof(WhosOnFirstComponent), &quot;currentStage&quot;);&#10;    &#10;    [HarmonyPrefix]&#10;    public static void Prefix(WhosOnFirstComponent __instance, out int __state)&#10;    {&#10;        __state = (int)currentStageField.GetValue(__instance);&#10;    }&#10;    &#10;    [HarmonyPostfix]&#10;    public static void Postfix(bool __result, int __state)&#10;    {&#10;        if (!Plugin.EnableWhosOnFirstVibration || !__result) return;&#10;        &#10;        int stageBeforePress = __state;&#10;        &#10;        float power = Plugin.WhosOnFirstVibrationBaseStrength + (stageBeforePress * 0.25f);&#10;        &#10;        power = Mathf.Clamp(power, Plugin.WhosOnFirstVibrationBaseStrength, 1.0f);&#10;&#10;        Plugin.TriggerVibration(power, DURATION);&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// MEMORY MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(MemoryComponent), &quot;HandleCorrectEntry&quot;)]&#10;public class MemoryComponentHapticPatch&#10;{&#10;    private const float DURATION = 0.4f;&#10;    &#10;    private static readonly FieldInfo currentStageField = AccessTools.Field(typeof(MemoryComponent), &quot;currentStage&quot;);&#10;    &#10;    [HarmonyPrefix]&#10;    public static void Prefix(MemoryComponent __instance)&#10;    {&#10;        if (!Plugin.EnableMemoryVibration) return;&#10;        &#10;        if (__instance.IsSolved)&#10;        {&#10;            return;&#10;        }&#10;        &#10;        int stage = (int)currentStageField.GetValue(__instance);&#10;        &#10;        float power = Plugin.MemoryVibrationBaseStrength + (stage * 0.2f);&#10;        &#10;        power = Mathf.Clamp(power, Plugin.MemoryVibrationBaseStrength, 1.0f);&#10;&#10;        Plugin.TriggerVibration(power, DURATION);&#10;    }&#10;}&#10;/// &lt;summary&gt;&#10;/// PATCH 1 OF 2: Handles the haptic feedback for scrolling through frequencies.&#10;/// This class is separate to ensure it always applies correctly.&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch]&#10;public class MorseCodeScrollHapticPatch&#10;{&#10;    private const float POWER = 0.2f;&#10;    private const float DURATION = 0.2f;&#10;    &#10;    [HarmonyPatch(typeof(MorseCodeComponent), &quot;OnButtonUpPushed&quot;)]&#10;    [HarmonyPatch(typeof(MorseCodeComponent), &quot;OnButtonDownPushed&quot;)]&#10;    [HarmonyPrefix]&#10;    public static void Prefix(MorseCodeComponent __instance, out int __state)&#10;    {&#10;        __state = __instance.CurrentFrequencyIndex;&#10;    }&#10;    &#10;    [HarmonyPatch(typeof(MorseCodeComponent), &quot;OnButtonUpPushed&quot;)]&#10;    [HarmonyPatch(typeof(MorseCodeComponent), &quot;OnButtonDownPushed&quot;)]&#10;    [HarmonyPostfix]&#10;    public static void Postfix(MorseCodeComponent __instance, int __state)&#10;    {&#10;        int oldIndex = __state;&#10;        int newIndex = __instance.CurrentFrequencyIndex;&#10;        &#10;        if (oldIndex != newIndex)&#10;        {&#10;            Plugin.TriggerVibration(POWER, DURATION);&#10;        }&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// PATCH 2 OF 2: Handles the haptic feedback for the blinking light when the module is focused.&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(MorseCodeComponent), &quot;SetLED&quot;)]&#10;public class MorseCodeBlinkHapticPatch&#10;{&#10;    private const float BLINK_POWER = 0.4f;&#10;    // A long duration that will be cut short by the &quot;Off&quot; signal.&#10;    private const float BLINK_START_DURATION = 3.0f; &#10;    // A very short duration to effectively stop the vibration instantly.&#10;    private const float BLINK_STOP_DURATION = 0.05f; &#10;&#10;    private static readonly FieldInfo isFocusedField = AccessTools.Field(typeof(BombComponent), &quot;isFocused&quot;);&#10;&#10;    /// &lt;summary&gt;&#10;    /// This Prefix runs before the LED state is changed.&#10;    /// It starts a long vibration when the light turns ON and a short one to stop it when the light turns OFF.&#10;    /// &lt;/summary&gt;&#10;    [HarmonyPrefix]&#10;    public static void Prefix(MorseCodeComponent __instance, object state)&#10;    {&#10;        if (isFocusedField == null) return;&#10;        &#10;        bool isModuleFocused = (bool)isFocusedField.GetValue(__instance);&#10;        if (!isModuleFocused)&#10;        {&#10;            return;&#10;        }&#10;&#10;        // The enum values are On=0, Off=1, CharSpace=2&#10;        int stateValue = (int)state;&#10;        &#10;        if (stateValue == 0) // LEDStateEnum.On&#10;        {&#10;            // Start a long vibration.&#10;            Plugin.TriggerVibration(BLINK_POWER, BLINK_START_DURATION);&#10;        }&#10;        else // LEDStateEnum.Off or LEDStateEnum.CharSpace&#10;        {&#10;            // Send a tiny vibration to immediately override and stop the previous one.&#10;            Plugin.TriggerVibration(BLINK_POWER, BLINK_STOP_DURATION);&#10;        }&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// COMPLICATED WIRE MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(VennSnippableWire), &quot;Interact&quot;)]&#10;public class ComplicatedWireHapticPatch&#10;{&#10;    [HarmonyPrefix]&#10;    public static void Prefix(VennSnippableWire __instance, out bool __state)&#10;    {&#10;        __state = __instance.Snipped;&#10;    }&#10;    &#10;    [HarmonyPostfix]&#10;    public static void Postfix(VennSnippableWire __instance, bool __state)&#10;    {&#10;        if (!Plugin.EnableComplicatedWireVibration) return;&#10;        &#10;        bool wasSnippedBeforeInteract = __state;&#10;        bool isSnippedAfterInteract = __instance.Snipped;&#10;        &#10;        if (!wasSnippedBeforeInteract &amp;&amp; isSnippedAfterInteract)&#10;        {&#10;            Plugin.TriggerVibration(Plugin.ComplicatedWireVibrationStrength, 0.15f);&#10;        }&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// WIRE SEQUENCE MODULE PART 1 - SNIPPING A WIRE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(WireSequenceWire), &quot;Interact&quot;)]&#10;public class WireSequenceWireHapticPatch&#10;{&#10;    [HarmonyPrefix]&#10;    public static void Prefix(WireSequenceWire __instance, out bool __state)&#10;    {&#10;        __state = __instance.Snipped;&#10;    }&#10;&#10;    [HarmonyPostfix]&#10;    public static void Postfix(WireSequenceWire __instance, bool __state)&#10;    {&#10;        if (!Plugin.EnableWireSequenceVibration) return;&#10;        &#10;        bool wasSnippedBefore = __state;&#10;        bool isSnippedAfter = __instance.Snipped;&#10;        &#10;        if (!wasSnippedBefore &amp;&amp; isSnippedAfter)&#10;        {&#10;            Plugin.TriggerVibration(Plugin.WireSequenceWireVibrationStrength, 0.1f);&#10;        }&#10;    }&#10;}&#10;&#10;&#10;/// &lt;summary&gt;&#10;/// WIRE SEQUENCE MODULE PART 2 - GOING TO NEXT STAGE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(WireSequenceComponent), &quot;DownButtonPressed&quot;)]&#10;public class WireSequenceStageHapticPatch&#10;{&#10;    private const float DURATION = 0.9f;&#10;    &#10;    private static readonly FieldInfo currentPageField = AccessTools.Field(typeof(WireSequenceComponent), &quot;currentPage&quot;);&#10;    &#10;    [HarmonyPrefix]&#10;    public static void Prefix(WireSequenceComponent __instance, out int __state)&#10;    {&#10;        __state = (int)currentPageField.GetValue(__instance);&#10;    }&#10;    &#10;    [HarmonyPostfix]&#10;    public static void Postfix(WireSequenceComponent __instance, int __state)&#10;    {&#10;        if (!Plugin.EnableWireSequenceVibration) return;&#10;        &#10;        int oldPage = __state;&#10;        int newPage = (int)currentPageField.GetValue(__instance);&#10;        &#10;        if (newPage &gt; oldPage)&#10;        {&#10;            float power = Plugin.WireSequenceStageVibrationBaseStrength + (oldPage * 0.2f);&#10;            &#10;            power = Mathf.Clamp(power, Plugin.WireSequenceStageVibrationBaseStrength, 1.0f);&#10;&#10;            Plugin.TriggerVibration(power, DURATION);&#10;        }&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// MAZE MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(InvisibleWallsComponent), &quot;ButtonDown&quot;)]&#10;public class MazeHapticPatch&#10;{&#10;    [HarmonyPrefix]&#10;    public static void Prefix()&#10;    {&#10;        if (!Plugin.EnableMazeVibration) return;&#10;        &#10;        Plugin.TriggerVibration(Plugin.MazeVibrationStrength, 0.2f);&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// PASSWORD MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch]&#10;public class PasswordSpinnerHapticPatch&#10;{&#10;    [HarmonyPatch(typeof(CharSpinner), &quot;Next&quot;)]&#10;    [HarmonyPatch(typeof(CharSpinner), &quot;Previous&quot;)]&#10;    [HarmonyPostfix]&#10;    public static void Postfix()&#10;    {&#10;        if (!Plugin.EnablePasswordVibration) return;&#10;        &#10;        Plugin.TriggerVibration(Plugin.PasswordVibrationStrength, 0.2f);&#10;    }&#10;}&#10;&#10;///&#10;///NEEDY MODULES HERE&#10;///&#10;&#10;/// &lt;summary&gt;&#10;/// CAPACITOR DISCHARGE NEEDY MODULE VENT MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch]&#10;public class CapacitorDischargeHapticPatch&#10;{&#10;    private const float PUSH_POWER = 0.7f;&#10;    private const float PUSH_DURATION = 500.0f; &#10;    &#10;    private const float RELEASE_POWER = 0.1f;&#10;    private const float RELEASE_DURATION = 0.1f;&#10;    &#10;    [HarmonyPatch(typeof(NeedyDischargeComponent), &quot;OnPush&quot;)]&#10;    [HarmonyPostfix]&#10;    public static void PushPostfix()&#10;    {&#10;        if (!Plugin.EnableCapacitorDischargeVibration) return;&#10;        &#10;        Plugin.TriggerVibration(Plugin.CapacitorDischargePushVibrationStrength, 500.0f);&#10;    }&#10;    &#10;    [HarmonyPatch(typeof(NeedyDischargeComponent), &quot;OnRelease&quot;)]&#10;    [HarmonyPostfix]&#10;    public static void ReleasePostfix()&#10;    {&#10;        if (!Plugin.EnableCapacitorDischargeVibration) return;&#10;        &#10;        Plugin.TriggerVibration(Plugin.CapacitorDischargeReleaseVibrationStrength, 0.1f);&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// KNOB NEEDY MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch]&#10;public class NeedyKnobHapticPatch&#10;{&#10;    [HarmonyPatch(typeof(PointingKnob), &quot;RotateLeft&quot;)]&#10;    [HarmonyPatch(typeof(PointingKnob), &quot;RotateRight&quot;)]&#10;    [HarmonyPostfix]&#10;    public static void Postfix()&#10;    {&#10;        if (!Plugin.EnableNeedyKnobVibration) return;&#10;        &#10;        Plugin.TriggerVibration(Plugin.NeedyKnobVibrationStrength, 0.2f);&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// NEEDY VENTING GAS MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(NeedyVentComponent), &quot;ButtonDown&quot;)]&#10;public class VentGasHapticPatch&#10;{&#10;    private static readonly FieldInfo displayChangingField = AccessTools.Field(typeof(NeedyVentComponent), &quot;displayChanging&quot;);&#10;    &#10;    [HarmonyPrefix]&#10;    public static void Prefix(NeedyVentComponent __instance, int index)&#10;    {&#10;        if (!Plugin.EnableVentGasVibration) return;&#10;        &#10;        // Do nothing if needy is not active.&#10;        bool isDisplayChanging = (bool)displayChangingField.GetValue(__instance);&#10;        if (__instance.State != NeedyComponent.NeedyStateEnum.Running || isDisplayChanging)&#10;        {&#10;            return;&#10;        }&#10;        &#10;        bool isCorrectPress = false;&#10;&#10;        // Index 0 is the &quot;Yes&quot; button.&#10;        if (index == 0 &amp;&amp; __instance.Question == NeedyVentComponent.QuestionEnum.VENT)&#10;        {&#10;            isCorrectPress = true;&#10;        }&#10;        // Index 1 is the &quot;No&quot; button.&#10;        else if (index == 1 &amp;&amp; __instance.Question == NeedyVentComponent.QuestionEnum.DETONATE)&#10;        {&#10;            isCorrectPress = true;&#10;        }&#10;        &#10;        if (isCorrectPress)&#10;        {&#10;            Plugin.TriggerVibration(Plugin.VentGasVibrationStrength, 0.5f);&#10;        }&#10;    }&#10;}&#10;&#10;///&#10;/// MISC STUFF HERE&#10;///&#10;&#10;&#10;/// &lt;summary&gt;&#10;/// ALARM CLOCK VIBRATIONS&#10;/// &lt;/summary&gt;&#10;public class AlarmClockHapticController : MonoBehaviour&#10;{&#10;    private const float POWER = 1.0f;&#10;    &#10;    private const float BEEP_VIBRATION_DURATION = 0.2f;&#10;    private const float PAUSE_DURATION = 0.10f;&#10;    &#10;    private const float TOTAL_CYCLE_INTERVAL = (BEEP_VIBRATION_DURATION + PAUSE_DURATION)*2;&#10;&#10;    private Coroutine hapticLoopCoroutine;&#10;    private FieldInfo isOnField;&#10;    private AlarmClock alarmClockInstance;&#10;&#10;    public void Initialize(AlarmClock alarmClock)&#10;    {&#10;        alarmClockInstance = alarmClock;&#10;        isOnField = AccessTools.Field(typeof(AlarmClock), &quot;isOn&quot;);&#10;        if (isOnField == null)&#10;        {&#10;            Plugin.Logger.LogError(&quot;[Haptics] CRITICAL: Could not find the 'isOn' field via reflection on AlarmClock!&quot;);&#10;        }&#10;    }&#10;&#10;    public void StartHapticLoop()&#10;    {&#10;        if (hapticLoopCoroutine != null) StopCoroutine(hapticLoopCoroutine);&#10;        hapticLoopCoroutine = StartCoroutine(HapticLoop());&#10;    }&#10;&#10;    public void StopHapticLoop()&#10;    {&#10;        if (hapticLoopCoroutine != null) StopCoroutine(hapticLoopCoroutine);&#10;        hapticLoopCoroutine = null;&#10;    }&#10;&#10;    private IEnumerator HapticLoop()&#10;    {&#10;        yield return new WaitForSeconds(0.1f);&#10;        if (isOnField == null) yield break;&#10;&#10;&#10;        while ((bool)isOnField.GetValue(alarmClockInstance))&#10;        {&#10;            if (Plugin.EnableAlarmClockVibration)&#10;            {&#10;                Plugin.TriggerVibration(Plugin.AlarmClockVibrationStrength, BEEP_VIBRATION_DURATION);&#10;            }&#10;            &#10;            yield return new WaitForSeconds(TOTAL_CYCLE_INTERVAL);&#10;        }&#10;    }&#10;}&#10;&#10;&#10;[HarmonyPatch(typeof(Assets.Scripts.Props.AlarmClock))] &#10;public class AlarmClockHapticPatch&#10;{&#10;&#10;    [HarmonyPatch(&quot;Start&quot;)]&#10;    [HarmonyPostfix]&#10;    public static void StartPostfix(Assets.Scripts.Props.AlarmClock __instance)&#10;    {&#10;        var controller = __instance.gameObject.AddComponent&lt;AlarmClockHapticController&gt;();&#10;        controller.Initialize(__instance);&#10;    }&#10;&#10;&#10;    [HarmonyPatch(&quot;TurnOn&quot;)]&#10;    [HarmonyPostfix]&#10;    public static void TurnOnPostfix(Assets.Scripts.Props.AlarmClock __instance)&#10;    {&#10;        var hapticController = __instance.GetComponent&lt;AlarmClockHapticController&gt;();&#10;        if (hapticController != null)&#10;        {&#10;            hapticController.StartHapticLoop();&#10;        }&#10;    }&#10;    &#10;    [HarmonyPatch(&quot;TurnOff&quot;)]&#10;    [HarmonyPostfix]&#10;    public static void TurnOffPostfix(Assets.Scripts.Props.AlarmClock __instance)&#10;    {&#10;        var hapticController = __instance.GetComponent&lt;AlarmClockHapticController&gt;();&#10;        if (hapticController != null)&#10;        {&#10;            hapticController.StopHapticLoop();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Collections;&#10;using System.Collections.Generic;&#10;using System.Linq;&#10;using System.Reflection;&#10;using System.Reflection.Emit;&#10;using Assets.Scripts.Props;&#10;using DarkTonic.MasterAudio;&#10;using BepInEx;&#10;using BepInEx.Configuration;&#10;using BepInEx.Logging;&#10;using UnityEngine;&#10;using HarmonyLib;&#10;&#10;namespace KeepVibingAndNobodyExplodes;&#10;&#10;[BepInPlugin(&quot;dryicedmatcha.keepvibing&quot;, &quot;Keep Vibing And Nobody Explodes&quot;, &quot;1.0.0&quot;)]&#10;public class Plugin : BaseUnityPlugin&#10;{&#10;    internal static new ManualLogSource Logger;&#10;    private ButtplugManager buttplugManager;&#10;    private static Plugin instance;&#10;    &#10;    private const string harmonyId = &quot;com.dryicedmatcha.ktane.keepvibing&quot;;&#10;    private static Harmony harmonyInstance;&#10;    &#10;    // Configuration entries - individual module controls&#10;    private ConfigEntry&lt;bool&gt; enableWireVibration;&#10;    private ConfigEntry&lt;float&gt; wireVibrationStrength;&#10;    &#10;    // Intiface connection settings&#10;    private ConfigEntry&lt;string&gt; intifaceHost;&#10;    private ConfigEntry&lt;int&gt; intifacePort;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableStrikeVibration;&#10;    private ConfigEntry&lt;float&gt; strikeVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableExplosionVibration;&#10;    private ConfigEntry&lt;float&gt; explosionVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableModuleSolveVibration;&#10;    private ConfigEntry&lt;float&gt; moduleSolveVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableButtonVibration;&#10;    private ConfigEntry&lt;float&gt; buttonPressVibrationStrength;&#10;    private ConfigEntry&lt;float&gt; buttonReleaseVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableKeypadVibration;&#10;    private ConfigEntry&lt;float&gt; keypadVibrationBaseStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableSimonVibration;&#10;    private ConfigEntry&lt;float&gt; simonVibrationBaseStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableWhosOnFirstVibration;&#10;    private ConfigEntry&lt;float&gt; whosOnFirstVibrationBaseStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableMemoryVibration;&#10;    private ConfigEntry&lt;float&gt; memoryVibrationBaseStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableMorseVibration;&#10;    private ConfigEntry&lt;float&gt; morseVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableComplicatedWireVibration;&#10;    private ConfigEntry&lt;float&gt; complicatedWireVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableWireSequenceVibration;&#10;    private ConfigEntry&lt;float&gt; wireSequenceWireVibrationStrength;&#10;    private ConfigEntry&lt;float&gt; wireSequenceStageVibrationBaseStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableMazeVibration;&#10;    private ConfigEntry&lt;float&gt; mazeVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enablePasswordVibration;&#10;    private ConfigEntry&lt;float&gt; passwordVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableCapacitorDischargeVibration;&#10;    private ConfigEntry&lt;float&gt; capacitorDischargePushVibrationStrength;&#10;    private ConfigEntry&lt;float&gt; capacitorDischargeReleaseVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableNeedyKnobVibration;&#10;    private ConfigEntry&lt;float&gt; needyKnobVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableVentGasVibration;&#10;    private ConfigEntry&lt;float&gt; ventGasVibrationStrength;&#10;    &#10;    private ConfigEntry&lt;bool&gt; enableAlarmClockVibration;&#10;    private ConfigEntry&lt;float&gt; alarmClockVibrationStrength;&#10;    &#10;    // Module-specific accessors&#10;    public static bool EnableWireVibration =&gt; instance?.enableWireVibration?.Value ?? true;&#10;    public static float WireVibrationStrength =&gt; instance?.wireVibrationStrength?.Value ?? 0.5f;&#10;    &#10;    public static bool EnableStrikeVibration =&gt; instance?.enableStrikeVibration?.Value ?? true;&#10;    public static float StrikeVibrationStrength =&gt; instance?.strikeVibrationStrength?.Value ?? 0.7f;&#10;    &#10;    public static bool EnableExplosionVibration =&gt; instance?.enableExplosionVibration?.Value ?? true;&#10;    public static float ExplosionVibrationStrength =&gt; instance?.explosionVibrationStrength?.Value ?? 1.0f;&#10;    &#10;    public static bool EnableModuleSolveVibration =&gt; instance?.enableModuleSolveVibration?.Value ?? true;&#10;    public static float ModuleSolveVibrationStrength =&gt; instance?.moduleSolveVibrationStrength?.Value ?? 1.0f;&#10;    &#10;    public static bool EnableButtonVibration =&gt; instance?.enableButtonVibration?.Value ?? true;&#10;    public static float ButtonPressVibrationStrength =&gt; instance?.buttonPressVibrationStrength?.Value ?? 0.4f;&#10;    public static float ButtonReleaseVibrationStrength =&gt; instance?.buttonReleaseVibrationStrength?.Value ?? 0.5f;&#10;    &#10;    public static bool EnableKeypadVibration =&gt; instance?.enableKeypadVibration?.Value ?? true;&#10;    public static float KeypadVibrationBaseStrength =&gt; instance?.keypadVibrationBaseStrength?.Value ?? 0.25f;&#10;    &#10;    public static bool EnableSimonVibration =&gt; instance?.enableSimonVibration?.Value ?? true;&#10;    public static float SimonVibrationBaseStrength =&gt; instance?.simonVibrationBaseStrength?.Value ?? 0.2f;&#10;    &#10;    public static bool EnableWhosOnFirstVibration =&gt; instance?.enableWhosOnFirstVibration?.Value ?? true;&#10;    public static float WhosOnFirstVibrationBaseStrength =&gt; instance?.whosOnFirstVibrationBaseStrength?.Value ?? 0.25f;&#10;    &#10;    public static bool EnableMemoryVibration =&gt; instance?.enableMemoryVibration?.Value ?? true;&#10;    public static float MemoryVibrationBaseStrength =&gt; instance?.memoryVibrationBaseStrength?.Value ?? 0.2f;&#10;    &#10;    public static bool EnableMorseVibration =&gt; instance?.enableMorseVibration?.Value ?? true;&#10;    public static float MorseVibrationStrength =&gt; instance?.morseVibrationStrength?.Value ?? 0.2f;&#10;    &#10;    public static bool EnableComplicatedWireVibration =&gt; instance?.enableComplicatedWireVibration?.Value ?? true;&#10;    public static float ComplicatedWireVibrationStrength =&gt; instance?.complicatedWireVibrationStrength?.Value ?? 0.5f;&#10;    &#10;    public static bool EnableWireSequenceVibration =&gt; instance?.enableWireSequenceVibration?.Value ?? true;&#10;    public static float WireSequenceWireVibrationStrength =&gt; instance?.wireSequenceWireVibrationStrength?.Value ?? 0.5f;&#10;    public static float WireSequenceStageVibrationBaseStrength =&gt; instance?.wireSequenceStageVibrationBaseStrength?.Value ?? 0.2f;&#10;    &#10;    public static bool EnableMazeVibration =&gt; instance?.enableMazeVibration?.Value ?? true;&#10;    public static float MazeVibrationStrength =&gt; instance?.mazeVibrationStrength?.Value ?? 0.3f;&#10;    &#10;    public static bool EnablePasswordVibration =&gt; instance?.enablePasswordVibration?.Value ?? true;&#10;    public static float PasswordVibrationStrength =&gt; instance?.passwordVibrationStrength?.Value ?? 0.3f;&#10;    &#10;    public static bool EnableCapacitorDischargeVibration =&gt; instance?.enableCapacitorDischargeVibration?.Value ?? true;&#10;    public static float CapacitorDischargePushVibrationStrength =&gt; instance?.capacitorDischargePushVibrationStrength?.Value ?? 0.7f;&#10;    public static float CapacitorDischargeReleaseVibrationStrength =&gt; instance?.capacitorDischargeReleaseVibrationStrength?.Value ?? 0.1f;&#10;    &#10;    public static bool EnableNeedyKnobVibration =&gt; instance?.enableNeedyKnobVibration?.Value ?? true;&#10;    public static float NeedyKnobVibrationStrength =&gt; instance?.needyKnobVibrationStrength?.Value ?? 0.2f;&#10;    &#10;    public static bool EnableVentGasVibration =&gt; instance?.enableVentGasVibration?.Value ?? true;&#10;    public static float VentGasVibrationStrength =&gt; instance?.ventGasVibrationStrength?.Value ?? 0.5f;&#10;    &#10;    public static bool EnableAlarmClockVibration =&gt; instance?.enableAlarmClockVibration?.Value ?? true;&#10;    public static float AlarmClockVibrationStrength =&gt; instance?.alarmClockVibrationStrength?.Value ?? 1.0f;&#10;    &#10;    // Intiface connection accessors&#10;    public static string IntifaceHost =&gt; instance?.intifaceHost?.Value ?? &quot;127.0.0.1&quot;;&#10;    public static int IntifacePort =&gt; instance?.intifacePort?.Value ?? 12345;&#10;    &#10;    private void Awake()&#10;    {&#10;        // Initialize configuration&#10;        enableWireVibration = Config.Bind(&quot;Wire&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Wire module&quot;);&#10;        &#10;        wireVibrationStrength = Config.Bind(&quot;Wire&quot;, &#10;                                                 &quot;VibrationStrength&quot;, &#10;                                                 0.5f, &#10;                                                 &quot;Strength of the vibration for the Wire module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableStrikeVibration = Config.Bind(&quot;General&quot;, &#10;                                     &quot;EnableStrikeVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations when the bomb receives a strike&quot;);&#10;        &#10;        strikeVibrationStrength = Config.Bind(&quot;General&quot;, &#10;                                                 &quot;StrikeVibrationStrength&quot;, &#10;                                                 0.7f, &#10;                                                 &quot;Strength of the vibration when the bomb receives a strike (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableExplosionVibration = Config.Bind(&quot;General&quot;, &#10;                                     &quot;EnableExplosionVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations when the bomb explodes&quot;);&#10;        &#10;        explosionVibrationStrength = Config.Bind(&quot;General&quot;, &#10;                                                 &quot;ExplosionVibrationStrength&quot;, &#10;                                                 1.0f, &#10;                                                 &quot;Strength of the vibration when the bomb explodes (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableModuleSolveVibration = Config.Bind(&quot;General&quot;, &#10;                                     &quot;EnableModuleSolveVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations when a module is solved&quot;);&#10;        &#10;        moduleSolveVibrationStrength = Config.Bind(&quot;General&quot;, &#10;                                                 &quot;ModuleSolveVibrationStrength&quot;, &#10;                                                 1.0f, &#10;                                                 &quot;Strength of the vibration when a module is solved (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableButtonVibration = Config.Bind(&quot;Button&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for button presses&quot;);&#10;        &#10;        buttonPressVibrationStrength = Config.Bind(&quot;Button&quot;, &#10;                                                 &quot;PressVibrationStrength&quot;, &#10;                                                 0.4f, &#10;                                                 &quot;Strength of the vibration when a button is pressed (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        buttonReleaseVibrationStrength = Config.Bind(&quot;Button&quot;, &#10;                                                 &quot;ReleaseVibrationStrength&quot;, &#10;                                                 0.5f, &#10;                                                 &quot;Strength of the vibration when a button is released (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableKeypadVibration = Config.Bind(&quot;Keypad&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Keypad module&quot;);&#10;        &#10;        keypadVibrationBaseStrength = Config.Bind(&quot;Keypad&quot;, &#10;                                                 &quot;VibrationBaseStrength&quot;, &#10;                                                 0.25f, &#10;                                                 &quot;Base strength of the vibration for the Keypad module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableSimonVibration = Config.Bind(&quot;Simon&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Simon Says module&quot;);&#10;        &#10;        simonVibrationBaseStrength = Config.Bind(&quot;Simon&quot;, &#10;                                                 &quot;VibrationBaseStrength&quot;, &#10;                                                 0.2f, &#10;                                                 &quot;Base strength of the vibration for the Simon Says module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableWhosOnFirstVibration = Config.Bind(&quot;WhosOnFirst&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Who's On First module&quot;);&#10;        &#10;        whosOnFirstVibrationBaseStrength = Config.Bind(&quot;WhosOnFirst&quot;, &#10;                                                 &quot;VibrationBaseStrength&quot;, &#10;                                                 0.25f, &#10;                                                 &quot;Base strength of the vibration for the Who's On First module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableMemoryVibration = Config.Bind(&quot;Memory&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Memory module&quot;);&#10;        &#10;        memoryVibrationBaseStrength = Config.Bind(&quot;Memory&quot;, &#10;                                                 &quot;VibrationBaseStrength&quot;, &#10;                                                 0.2f, &#10;                                                 &quot;Base strength of the vibration for the Memory module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableMorseVibration = Config.Bind(&quot;Morse&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Morse Code module&quot;);&#10;        &#10;        morseVibrationStrength = Config.Bind(&quot;Morse&quot;, &#10;                                                 &quot;VibrationStrength&quot;, &#10;                                                 0.2f, &#10;                                                 &quot;Strength of the vibration for the Morse Code module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableComplicatedWireVibration = Config.Bind(&quot;ComplicatedWire&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Complicated Wire module&quot;);&#10;        &#10;        complicatedWireVibrationStrength = Config.Bind(&quot;ComplicatedWire&quot;, &#10;                                                 &quot;VibrationStrength&quot;, &#10;                                                 0.5f, &#10;                                                 &quot;Strength of the vibration for the Complicated Wire module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableWireSequenceVibration = Config.Bind(&quot;WireSequence&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Wire Sequence module&quot;);&#10;        &#10;        wireSequenceWireVibrationStrength = Config.Bind(&quot;WireSequence&quot;, &#10;                                                 &quot;WireVibrationStrength&quot;, &#10;                                                 0.5f, &#10;                                                 &quot;Strength of the vibration for wire snips in the Wire Sequence module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        wireSequenceStageVibrationBaseStrength = Config.Bind(&quot;WireSequence&quot;, &#10;                                                 &quot;StageVibrationBaseStrength&quot;, &#10;                                                 0.2f, &#10;                                                 &quot;Base strength of the vibration for stage transitions in the Wire Sequence module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableMazeVibration = Config.Bind(&quot;Maze&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Maze module&quot;);&#10;        &#10;        mazeVibrationStrength = Config.Bind(&quot;Maze&quot;, &#10;                                                 &quot;VibrationStrength&quot;, &#10;                                                 0.3f, &#10;                                                 &quot;Strength of the vibration for the Maze module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enablePasswordVibration = Config.Bind(&quot;Password&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Password module&quot;);&#10;        &#10;        passwordVibrationStrength = Config.Bind(&quot;Password&quot;, &#10;                                                 &quot;VibrationStrength&quot;, &#10;                                                 0.3f, &#10;                                                 &quot;Strength of the vibration for the Password module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableCapacitorDischargeVibration = Config.Bind(&quot;CapacitorDischarge&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Capacitor Discharge module&quot;);&#10;        &#10;        capacitorDischargePushVibrationStrength = Config.Bind(&quot;CapacitorDischarge&quot;, &#10;                                                 &quot;PushVibrationStrength&quot;, &#10;                                                 0.7f, &#10;                                                 &quot;Strength of the vibration when pushing the capacitor in the Capacitor Discharge module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        capacitorDischargeReleaseVibrationStrength = Config.Bind(&quot;CapacitorDischarge&quot;, &#10;                                                 &quot;ReleaseVibrationStrength&quot;, &#10;                                                 0.1f, &#10;                                                 &quot;Strength of the vibration when releasing the capacitor in the Capacitor Discharge module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableNeedyKnobVibration = Config.Bind(&quot;NeedyKnob&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Needy Knob module&quot;);&#10;        &#10;        needyKnobVibrationStrength = Config.Bind(&quot;NeedyKnob&quot;, &#10;                                                 &quot;VibrationStrength&quot;, &#10;                                                 0.2f, &#10;                                                 &quot;Strength of the vibration for the Needy Knob module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableVentGasVibration = Config.Bind(&quot;VentGas&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Venting Gas module&quot;);&#10;        &#10;        ventGasVibrationStrength = Config.Bind(&quot;VentGas&quot;, &#10;                                                 &quot;VibrationStrength&quot;, &#10;                                                 0.5f, &#10;                                                 &quot;Strength of the vibration for the Venting Gas module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        enableAlarmClockVibration = Config.Bind(&quot;AlarmClock&quot;, &#10;                                     &quot;EnableVibration&quot;, &#10;                                     true, &#10;                                     &quot;Enable or disable vibrations for the Alarm Clock module&quot;);&#10;        &#10;        alarmClockVibrationStrength = Config.Bind(&quot;AlarmClock&quot;, &#10;                                                 &quot;VibrationStrength&quot;, &#10;                                                 1.0f, &#10;                                                 &quot;Strength of the vibration for the Alarm Clock module (0.1 = 10% strength, 1.0 = 100% strength)&quot; );&#10;        &#10;        intifaceHost = Config.Bind(&quot;Intiface&quot;, &#10;                                     &quot;Host&quot;, &#10;                                     &quot;127.0.0.1&quot;, &#10;                                     &quot;Host address for Intiface server&quot;);&#10;        &#10;        intifacePort = Config.Bind(&quot;Intiface&quot;, &#10;                                     &quot;Port&quot;, &#10;                                     12345, &#10;                                     &quot;Port number for Intiface server&quot;);&#10;        &#10;        // Plugin startup logic&#10;        Logger = base.Logger;&#10;        Logger.LogInfo($&quot;Plugin {&quot;Keep Vibing and Nobody Explodes&quot;} is loaded!&quot;);&#10;        &#10;        instance = this;&#10;        &#10;        InitializeButtplug();&#10;        &#10;        ApplyHarmonyPatches();&#10;    }&#10;    &#10;    private void ApplyHarmonyPatches()&#10;    {&#10;        if (harmonyInstance == null)&#10;        {&#10;            harmonyInstance = new Harmony(harmonyId);&#10;        }&#10;        &#10;        harmonyInstance.PatchAll();&#10;        Logger.LogInfo(&quot;Harmony patches applied.&quot;);&#10;    }&#10;    &#10;    private void InitializeButtplug()&#10;    {&#10;        &#10;        var buttplugObject = new GameObject(&quot;ButtplugManager&quot;);&#10;        DontDestroyOnLoad(buttplugObject);&#10;        &#10;        &#10;        buttplugManager = buttplugObject.AddComponent&lt;ButtplugManager&gt;();&#10;        buttplugManager.Initialize(Logger);&#10;        &#10;        &#10;        buttplugManager.OnDeviceListUpdated += (sender, args) =&gt;&#10;        {&#10;            Logger.LogInfo($&quot;Devices updated: {args.After.Count} devices connected&quot;);&#10;            buttplugManager.LogDeviceInfo();&#10;        };&#10;        &#10;        Logger.LogInfo(&quot;ButtplugManager initialized. Use 'buttplugManager.Connect()' to connect to Intiface.&quot;);&#10;    }&#10;    &#10;    private void Start()&#10;    {&#10;        &#10;        if (buttplugManager != null)&#10;        {&#10;            Logger.LogInfo(&quot;Attempting to connect to Intiface server...&quot;);&#10;            buttplugManager.Connect();&#10;        }&#10;    }&#10;    &#10;    public void TestVibration()&#10;    {&#10;        if (buttplugManager != null &amp;&amp; buttplugManager.IsConnected)&#10;        {&#10;            &#10;            var devices = buttplugManager.Devices;&#10;            if (devices.Count &gt; 0)&#10;            {&#10;                Logger.LogInfo(&quot;Testing vibration for 2 seconds...&quot;);&#10;                buttplugManager.VibrateDevice(devices[0].DeviceName, 0.5f, 2.0f);&#10;            }&#10;            else&#10;            {&#10;                Logger.LogInfo(&quot;No devices available for testing&quot;);&#10;            }&#10;        }&#10;        else&#10;        {&#10;            Logger.LogInfo(&quot;Not connected to Intiface server&quot;);&#10;        }&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Vibrates all connected vibrator devices&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;power&quot;&gt;Vibration power (0.0 to 1.0)&lt;/param&gt;&#10;    /// &lt;param name=&quot;duration&quot;&gt;Duration in seconds&lt;/param&gt;&#10;    public void VibrateAllDevices(float power, float duration)&#10;    {&#10;        // Power is now set directly by the patches, no multiplier needed&#10;        float clampedPower = Mathf.Clamp01(power);&#10;        &#10;        if (buttplugManager != null &amp;&amp; buttplugManager.IsConnected)&#10;        {&#10;            var devices = buttplugManager.Devices;&#10;            if (devices.Count &gt; 0)&#10;            {&#10;                Logger.LogInfo($&quot;Vibrating {devices.Count} devices at {clampedPower} power for {duration} seconds&quot;);&#10;                foreach (var device in devices)&#10;                {&#10;                    Logger.LogInfo($&quot;Calling VibrateDevice for: {device.DeviceName}&quot;);&#10;                    buttplugManager.VibrateDevice(device.DeviceName, clampedPower, duration);&#10;                }&#10;            }&#10;            else&#10;            {&#10;                Logger.LogInfo(&quot;No devices available for vibration&quot;);&#10;            }&#10;        }&#10;        else&#10;        {&#10;            Logger.LogInfo(&quot;Not connected to Intiface server&quot;);&#10;        }&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Static access to vibrate devices from Harmony patches&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;power&quot;&gt;Vibration power (0.0 to 1.0)&lt;/param&gt;&#10;    /// &lt;param name=&quot;duration&quot;&gt;Duration in seconds&lt;/param&gt;&#10;    /// &lt;param name=&quot;frameDelay&quot;&gt;Number of frames to delay (0 for no delay)&lt;/param&gt;&#10;    public static void TriggerVibration(float power, float duration, int frameDelay = 0)&#10;    {&#10;        // No global check needed, patches handle their own enable/disable&#10;        if (frameDelay &gt; 0)&#10;        {&#10;            instance?.StartCoroutine(TriggerVibrationDelayed(power, duration, frameDelay));&#10;        }&#10;        else&#10;        {&#10;            instance?.VibrateAllDevices(power, duration);&#10;        }&#10;    }&#10;    private static IEnumerator TriggerVibrationDelayed(float power, float duration, int frameDelay)&#10;    {&#10;        for (int i = 0; i &lt; frameDelay; i++)&#10;        {&#10;            yield return null; // Wait for one frame&#10;        }&#10;        instance?.VibrateAllDevices(power, duration);&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// Vibration when regular wire is cut. WIRE MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(SnippableWire), &quot;Interact&quot;)]&#10;public class WireSnipVibrationPatch&#10;{&#10;    [HarmonyPrefix]&#10;    public static void Prefix(SnippableWire __instance, out bool __state)&#10;    {&#10;        __state = __instance.Snipped;&#10;    }&#10;    &#10;    [HarmonyPostfix]&#10;    public static void Postfix(SnippableWire __instance, bool __state)&#10;    {&#10;        if (!Plugin.EnableWireVibration) return;&#10;        &#10;        bool wasSnippedBeforeInteract = __state;&#10;        bool isSnippedAfterInteract = __instance.Snipped;&#10;&#10;        if (!wasSnippedBeforeInteract &amp;&amp; isSnippedAfterInteract)&#10;        {&#10;            Plugin.TriggerVibration(Plugin.WireVibrationStrength, 0.1f);&#10;        }&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// Vibration when you get a strike.&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(Bomb), &quot;OnStrike&quot;)]&#10;[HarmonyPriority(Priority.Low)]&#10;public class StrikeVibrationPatch&#10;{&#10;    [HarmonyPostfix]&#10;    public static void Postfix()&#10;    {&#10;        if (!Plugin.EnableStrikeVibration) return;&#10;        &#10;        Plugin.TriggerVibration(Plugin.StrikeVibrationStrength, 0.5f, 1);&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// VIBRATION WHEN BOMB DETONATES&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(Bomb), &quot;Detonate&quot;)]&#10;[HarmonyPriority(Priority.Last)]&#10;public class ExplosionVibrationPatch&#10;{&#10;    [HarmonyPostfix]&#10;    public static void Postfix()&#10;    {&#10;        if (!Plugin.EnableExplosionVibration) return;&#10;        &#10;        Plugin.TriggerVibration(Plugin.ExplosionVibrationStrength, 3.0f, 2);&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// Vibration when Module is Solved&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(Bomb), &quot;OnPass&quot;)]&#10;public class ModuleSolveVibrationPatch&#10;{&#10;    [HarmonyPostfix]&#10;    public static void Postfix()&#10;    {&#10;        if (!Plugin.EnableModuleSolveVibration) return;&#10;        &#10;        Plugin.TriggerVibration(Plugin.ModuleSolveVibrationStrength, 0.1f);&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// VIBRATION ON THE BUTTON MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(PressableButton))]&#10;public class BigButtonHapticPatch&#10;{&#10;&#10;    [HarmonyPostfix]&#10;    [HarmonyPatch(&quot;Interact&quot;)]&#10;    public static void PressPostfix()&#10;    {&#10;        if (!Plugin.EnableButtonVibration) return;&#10;        &#10;        Plugin.TriggerVibration(Plugin.ButtonPressVibrationStrength, 500.0f);&#10;    }&#10;    &#10;    [HarmonyPrefix]&#10;    [HarmonyPatch(&quot;InteractEnded&quot;)]&#10;    public static void ReleasePrefix(PressableButton __instance)&#10;    {&#10;        if (!Plugin.EnableButtonVibration) return;&#10;        &#10;        if (__instance.IsInteracting())&#10;        {&#10;            Plugin.TriggerVibration(Plugin.ButtonReleaseVibrationStrength, 0.1f);&#10;        }&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// VIBRATION ON KEYPAD MODULE AKA SYMBOLS MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(KeypadComponent), &quot;ButtonDown&quot;)]&#10;public class KeypadHapticPatch&#10;{&#10;    &#10;    //Check how many buttons are alredy pressed&#10;    [HarmonyPrefix]&#10;    public static void Prefix(KeypadComponent __instance, out int __state)&#10;    {&#10;        int correctButtonsPressed = 0;&#10;        foreach (var button in __instance.buttons)&#10;        {&#10;            if (button.IsStayingDown)&#10;            {&#10;                correctButtonsPressed++;&#10;            }&#10;        }&#10;        __state = correctButtonsPressed;&#10;    }&#10;    &#10;    [HarmonyPostfix]&#10;    public static void Postfix(bool __result, int __state)&#10;    {&#10;        if (!Plugin.EnableKeypadVibration || !__result) return;&#10;        &#10;        int correctButtonsPressedBeforeThisOne = __state;&#10;        &#10;        float power = Plugin.KeypadVibrationBaseStrength + (correctButtonsPressedBeforeThisOne * 0.25f);&#10;        &#10;        power = Mathf.Clamp(power, Plugin.KeypadVibrationBaseStrength, 1.0f);&#10;&#10;        Plugin.TriggerVibration(power, 0.3f);&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// SIMON SAYS MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(SimonComponent), &quot;ButtonDown&quot;)]&#10;public class SimonSaysHapticPatch&#10;{&#10;    private const float DURATION = 0.5f;&#10;    &#10;    private static readonly FieldInfo solveProgressField = AccessTools.Field(typeof(SimonComponent), &quot;solveProgress&quot;);&#10;    private static readonly FieldInfo currentSequenceField = AccessTools.Field(typeof(SimonComponent), &quot;currentSequence&quot;);&#10;    &#10;    [HarmonyPrefix]&#10;    public static void Prefix(SimonComponent __instance, int index)&#10;    {&#10;        if (!Plugin.EnableSimonVibration) return;&#10;        &#10;        if (__instance.IsSolved || !__instance.IsActive)&#10;        {&#10;            return;&#10;        }&#10;        &#10;        int solveProgress = (int)solveProgressField.GetValue(__instance);&#10;        int[] currentSequence = (int[])currentSequenceField.GetValue(__instance);&#10;        &#10;        if (__instance.MapToSolution(currentSequence[solveProgress]) == index)&#10;        {&#10;            float power = Plugin.SimonVibrationBaseStrength + (solveProgress * 0.2f);&#10;            power = Mathf.Clamp(power, Plugin.SimonVibrationBaseStrength, 1.0f);&#10;&#10;            Plugin.TriggerVibration(power, DURATION);&#10;        }&#10;    }&#10;}&#10;&#10;[HarmonyPatch(typeof(WhosOnFirstComponent), &quot;ButtonDown&quot;)]&#10;public class WhosOnFirstHapticPatch&#10;{&#10;    private const float DURATION = 1.0f;&#10;    &#10;    private static readonly FieldInfo currentStageField = AccessTools.Field(typeof(WhosOnFirstComponent), &quot;currentStage&quot;);&#10;    &#10;    [HarmonyPrefix]&#10;    public static void Prefix(WhosOnFirstComponent __instance, out int __state)&#10;    {&#10;        __state = (int)currentStageField.GetValue(__instance);&#10;    }&#10;    &#10;    [HarmonyPostfix]&#10;    public static void Postfix(bool __result, int __state)&#10;    {&#10;        if (!Plugin.EnableWhosOnFirstVibration || !__result) return;&#10;        &#10;        int stageBeforePress = __state;&#10;        &#10;        float power = Plugin.WhosOnFirstVibrationBaseStrength + (stageBeforePress * 0.25f);&#10;        &#10;        power = Mathf.Clamp(power, Plugin.WhosOnFirstVibrationBaseStrength, 1.0f);&#10;&#10;        Plugin.TriggerVibration(power, DURATION);&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// MEMORY MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(MemoryComponent), &quot;HandleCorrectEntry&quot;)]&#10;public class MemoryComponentHapticPatch&#10;{&#10;    private const float DURATION = 0.4f;&#10;    &#10;    private static readonly FieldInfo currentStageField = AccessTools.Field(typeof(MemoryComponent), &quot;currentStage&quot;);&#10;    &#10;    [HarmonyPrefix]&#10;    public static void Prefix(MemoryComponent __instance)&#10;    {&#10;        if (!Plugin.EnableMemoryVibration) return;&#10;        &#10;        if (__instance.IsSolved)&#10;        {&#10;            return;&#10;        }&#10;        &#10;        int stage = (int)currentStageField.GetValue(__instance);&#10;        &#10;        float power = Plugin.MemoryVibrationBaseStrength + (stage * 0.2f);&#10;        &#10;        power = Mathf.Clamp(power, Plugin.MemoryVibrationBaseStrength, 1.0f);&#10;&#10;        Plugin.TriggerVibration(power, DURATION);&#10;    }&#10;}&#10;/// &lt;summary&gt;&#10;/// PATCH 1 OF 2: Handles the haptic feedback for scrolling through frequencies.&#10;/// This class is separate to ensure it always applies correctly.&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch]&#10;public class MorseCodeScrollHapticPatch&#10;{&#10;    private const float POWER = 0.2f;&#10;    private const float DURATION = 0.2f;&#10;    &#10;    [HarmonyPatch(typeof(MorseCodeComponent), &quot;OnButtonUpPushed&quot;)]&#10;    [HarmonyPatch(typeof(MorseCodeComponent), &quot;OnButtonDownPushed&quot;)]&#10;    [HarmonyPrefix]&#10;    public static void Prefix(MorseCodeComponent __instance, out int __state)&#10;    {&#10;        __state = __instance.CurrentFrequencyIndex;&#10;    }&#10;    &#10;    [HarmonyPatch(typeof(MorseCodeComponent), &quot;OnButtonUpPushed&quot;)]&#10;    [HarmonyPatch(typeof(MorseCodeComponent), &quot;OnButtonDownPushed&quot;)]&#10;    [HarmonyPostfix]&#10;    public static void Postfix(MorseCodeComponent __instance, int __state)&#10;    {&#10;        int oldIndex = __state;&#10;        int newIndex = __instance.CurrentFrequencyIndex;&#10;        &#10;        if (oldIndex != newIndex)&#10;        {&#10;            Plugin.TriggerVibration(POWER, DURATION);&#10;        }&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// PATCH 2 OF 2: Handles the haptic feedback for the blinking light when the module is focused.&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(MorseCodeComponent), &quot;SetLED&quot;)]&#10;public class MorseCodeBlinkHapticPatch&#10;{&#10;    private const float BLINK_POWER = 0.4f;&#10;    // A long duration that will be cut short by the &quot;Off&quot; signal.&#10;    private const float BLINK_START_DURATION = 3.0f; &#10;    // A very short duration to effectively stop the vibration instantly.&#10;    private const float BLINK_STOP_DURATION = 0.05f; &#10;&#10;    private static readonly FieldInfo isFocusedField = AccessTools.Field(typeof(BombComponent), &quot;isFocused&quot;);&#10;&#10;    /// &lt;summary&gt;&#10;    /// This Prefix runs before the LED state is changed.&#10;    /// It starts a long vibration when the light turns ON and a short one to stop it when the light turns OFF.&#10;    /// &lt;/summary&gt;&#10;    [HarmonyPrefix]&#10;    public static void Prefix(MorseCodeComponent __instance, object state)&#10;    {&#10;        if (isFocusedField == null) return;&#10;        &#10;        bool isModuleFocused = (bool)isFocusedField.GetValue(__instance);&#10;        if (!isModuleFocused)&#10;        {&#10;            return;&#10;        }&#10;&#10;        // The enum values are On=0, Off=1, CharSpace=2&#10;        int stateValue = (int)state;&#10;        &#10;        if (stateValue == 0) // LEDStateEnum.On&#10;        {&#10;            // Start a long vibration.&#10;            Plugin.TriggerVibration(BLINK_POWER, BLINK_START_DURATION);&#10;        }&#10;        else // LEDStateEnum.Off or LEDStateEnum.CharSpace&#10;        {&#10;            // Send a tiny vibration to immediately override and stop the previous one.&#10;            Plugin.TriggerVibration(BLINK_POWER, BLINK_STOP_DURATION);&#10;        }&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// COMPLICATED WIRE MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(VennSnippableWire), &quot;Interact&quot;)]&#10;public class ComplicatedWireHapticPatch&#10;{&#10;    [HarmonyPrefix]&#10;    public static void Prefix(VennSnippableWire __instance, out bool __state)&#10;    {&#10;        __state = __instance.Snipped;&#10;    }&#10;    &#10;    [HarmonyPostfix]&#10;    public static void Postfix(VennSnippableWire __instance, bool __state)&#10;    {&#10;        if (!Plugin.EnableComplicatedWireVibration) return;&#10;        &#10;        bool wasSnippedBeforeInteract = __state;&#10;        bool isSnippedAfterInteract = __instance.Snipped;&#10;        &#10;        if (!wasSnippedBeforeInteract &amp;&amp; isSnippedAfterInteract)&#10;        {&#10;            Plugin.TriggerVibration(Plugin.ComplicatedWireVibrationStrength, 0.15f);&#10;        }&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// WIRE SEQUENCE MODULE PART 1 - SNIPPING A WIRE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(WireSequenceWire), &quot;Interact&quot;)]&#10;public class WireSequenceWireHapticPatch&#10;{&#10;    [HarmonyPrefix]&#10;    public static void Prefix(WireSequenceWire __instance, out bool __state)&#10;    {&#10;        __state = __instance.Snipped;&#10;    }&#10;&#10;    [HarmonyPostfix]&#10;    public static void Postfix(WireSequenceWire __instance, bool __state)&#10;    {&#10;        if (!Plugin.EnableWireSequenceVibration) return;&#10;        &#10;        bool wasSnippedBefore = __state;&#10;        bool isSnippedAfter = __instance.Snipped;&#10;        &#10;        if (!wasSnippedBefore &amp;&amp; isSnippedAfter)&#10;        {&#10;            Plugin.TriggerVibration(Plugin.WireSequenceWireVibrationStrength, 0.1f);&#10;        }&#10;    }&#10;}&#10;&#10;&#10;/// &lt;summary&gt;&#10;/// WIRE SEQUENCE MODULE PART 2 - GOING TO NEXT STAGE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(WireSequenceComponent), &quot;DownButtonPressed&quot;)]&#10;public class WireSequenceStageHapticPatch&#10;{&#10;    private const float DURATION = 0.9f;&#10;    &#10;    private static readonly FieldInfo currentPageField = AccessTools.Field(typeof(WireSequenceComponent), &quot;currentPage&quot;);&#10;    &#10;    [HarmonyPrefix]&#10;    public static void Prefix(WireSequenceComponent __instance, out int __state)&#10;    {&#10;        __state = (int)currentPageField.GetValue(__instance);&#10;    }&#10;    &#10;    [HarmonyPostfix]&#10;    public static void Postfix(WireSequenceComponent __instance, int __state)&#10;    {&#10;        if (!Plugin.EnableWireSequenceVibration) return;&#10;        &#10;        int oldPage = __state;&#10;        int newPage = (int)currentPageField.GetValue(__instance);&#10;        &#10;        if (newPage &gt; oldPage)&#10;        {&#10;            float power = Plugin.WireSequenceStageVibrationBaseStrength + (oldPage * 0.2f);&#10;            &#10;            power = Mathf.Clamp(power, Plugin.WireSequenceStageVibrationBaseStrength, 1.0f);&#10;&#10;            Plugin.TriggerVibration(power, DURATION);&#10;        }&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// MAZE MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(InvisibleWallsComponent), &quot;ButtonDown&quot;)]&#10;public class MazeHapticPatch&#10;{&#10;    [HarmonyPrefix]&#10;    public static void Prefix()&#10;    {&#10;        if (!Plugin.EnableMazeVibration) return;&#10;        &#10;        Plugin.TriggerVibration(Plugin.MazeVibrationStrength, 0.2f);&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// PASSWORD MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch]&#10;public class PasswordSpinnerHapticPatch&#10;{&#10;    [HarmonyPatch(typeof(CharSpinner), &quot;Next&quot;)]&#10;    [HarmonyPatch(typeof(CharSpinner), &quot;Previous&quot;)]&#10;    [HarmonyPostfix]&#10;    public static void Postfix()&#10;    {&#10;        if (!Plugin.EnablePasswordVibration) return;&#10;        &#10;        Plugin.TriggerVibration(Plugin.PasswordVibrationStrength, 0.2f);&#10;    }&#10;}&#10;&#10;///&#10;///NEEDY MODULES HERE&#10;///&#10;&#10;/// &lt;summary&gt;&#10;/// CAPACITOR DISCHARGE NEEDY MODULE VENT MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch]&#10;public class CapacitorDischargeHapticPatch&#10;{&#10;    private const float PUSH_POWER = 0.7f;&#10;    private const float PUSH_DURATION = 500.0f; &#10;    &#10;    private const float RELEASE_POWER = 0.1f;&#10;    private const float RELEASE_DURATION = 0.1f;&#10;    &#10;    [HarmonyPatch(typeof(NeedyDischargeComponent), &quot;OnPush&quot;)]&#10;    [HarmonyPostfix]&#10;    public static void PushPostfix()&#10;    {&#10;        if (!Plugin.EnableCapacitorDischargeVibration) return;&#10;        &#10;        Plugin.TriggerVibration(Plugin.CapacitorDischargePushVibrationStrength, 500.0f);&#10;    }&#10;    &#10;    [HarmonyPatch(typeof(NeedyDischargeComponent), &quot;OnRelease&quot;)]&#10;    [HarmonyPostfix]&#10;    public static void ReleasePostfix()&#10;    {&#10;        if (!Plugin.EnableCapacitorDischargeVibration) return;&#10;        &#10;        Plugin.TriggerVibration(Plugin.CapacitorDischargeReleaseVibrationStrength, 0.1f);&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// KNOB NEEDY MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch]&#10;public class NeedyKnobHapticPatch&#10;{&#10;    [HarmonyPatch(typeof(PointingKnob), &quot;RotateLeft&quot;)]&#10;    [HarmonyPatch(typeof(PointingKnob), &quot;RotateRight&quot;)]&#10;    [HarmonyPostfix]&#10;    public static void Postfix()&#10;    {&#10;        if (!Plugin.EnableNeedyKnobVibration) return;&#10;        &#10;        Plugin.TriggerVibration(Plugin.NeedyKnobVibrationStrength, 0.2f);&#10;    }&#10;}&#10;&#10;/// &lt;summary&gt;&#10;/// NEEDY VENTING GAS MODULE&#10;/// &lt;/summary&gt;&#10;[HarmonyPatch(typeof(NeedyVentComponent), &quot;ButtonDown&quot;)]&#10;public class VentGasHapticPatch&#10;{&#10;    private static readonly FieldInfo displayChangingField = AccessTools.Field(typeof(NeedyVentComponent), &quot;displayChanging&quot;);&#10;    &#10;    [HarmonyPrefix]&#10;    public static void Prefix(NeedyVentComponent __instance, int index)&#10;    {&#10;        if (!Plugin.EnableVentGasVibration) return;&#10;        &#10;        // Do nothing if needy is not active.&#10;        bool isDisplayChanging = (bool)displayChangingField.GetValue(__instance);&#10;        if (__instance.State != NeedyComponent.NeedyStateEnum.Running || isDisplayChanging)&#10;        {&#10;            return;&#10;        }&#10;        &#10;        bool isCorrectPress = false;&#10;&#10;        // Index 0 is the &quot;Yes&quot; button.&#10;        if (index == 0 &amp;&amp; __instance.Question == NeedyVentComponent.QuestionEnum.VENT)&#10;        {&#10;            isCorrectPress = true;&#10;        }&#10;        // Index 1 is the &quot;No&quot; button.&#10;        else if (index == 1 &amp;&amp; __instance.Question == NeedyVentComponent.QuestionEnum.DETONATE)&#10;        {&#10;            isCorrectPress = true;&#10;        }&#10;        &#10;        if (isCorrectPress)&#10;        {&#10;            Plugin.TriggerVibration(Plugin.VentGasVibrationStrength, 0.5f);&#10;        }&#10;    }&#10;}&#10;&#10;///&#10;/// MISC STUFF HERE&#10;///&#10;&#10;&#10;/// &lt;summary&gt;&#10;/// ALARM CLOCK VIBRATIONS&#10;/// &lt;/summary&gt;&#10;public class AlarmClockHapticController : MonoBehaviour&#10;{&#10;    private const float POWER = 1.0f;&#10;    &#10;    private const float BEEP_VIBRATION_DURATION = 0.2f;&#10;    private const float PAUSE_DURATION = 0.10f;&#10;    &#10;    private const float TOTAL_CYCLE_INTERVAL = (BEEP_VIBRATION_DURATION + PAUSE_DURATION)*2;&#10;&#10;    private Coroutine hapticLoopCoroutine;&#10;    private FieldInfo isOnField;&#10;    private AlarmClock alarmClockInstance;&#10;&#10;    public void Initialize(AlarmClock alarmClock)&#10;    {&#10;        alarmClockInstance = alarmClock;&#10;        isOnField = AccessTools.Field(typeof(AlarmClock), &quot;isOn&quot;);&#10;        if (isOnField == null)&#10;        {&#10;            Plugin.Logger.LogError(&quot;[Haptics] CRITICAL: Could not find the 'isOn' field via reflection on AlarmClock!&quot;);&#10;        }&#10;    }&#10;&#10;    public void StartHapticLoop()&#10;    {&#10;        if (hapticLoopCoroutine != null) StopCoroutine(hapticLoopCoroutine);&#10;        hapticLoopCoroutine = StartCoroutine(HapticLoop());&#10;    }&#10;&#10;    public void StopHapticLoop()&#10;    {&#10;        if (hapticLoopCoroutine != null) StopCoroutine(hapticLoopCoroutine);&#10;        hapticLoopCoroutine = null;&#10;    }&#10;&#10;    private IEnumerator HapticLoop()&#10;    {&#10;        yield return new WaitForSeconds(0.1f);&#10;        if (isOnField == null) yield break;&#10;&#10;&#10;        while ((bool)isOnField.GetValue(alarmClockInstance))&#10;        {&#10;            if (Plugin.EnableAlarmClockVibration)&#10;            {&#10;                Plugin.TriggerVibration(Plugin.AlarmClockVibrationStrength, BEEP_VIBRATION_DURATION);&#10;            }&#10;            &#10;            yield return new WaitForSeconds(TOTAL_CYCLE_INTERVAL);&#10;        }&#10;    }&#10;}&#10;&#10;&#10;[HarmonyPatch(typeof(Assets.Scripts.Props.AlarmClock))] &#10;public class AlarmClockHapticPatch&#10;{&#10;&#10;    [HarmonyPatch(&quot;Start&quot;)]&#10;    [HarmonyPostfix]&#10;    public static void StartPostfix(Assets.Scripts.Props.AlarmClock __instance)&#10;    {&#10;        var controller = __instance.gameObject.AddComponent&lt;AlarmClockHapticController&gt;();&#10;        controller.Initialize(__instance);&#10;    }&#10;&#10;&#10;    [HarmonyPatch(&quot;TurnOn&quot;)]&#10;    [HarmonyPostfix]&#10;    public static void TurnOnPostfix(Assets.Scripts.Props.AlarmClock __instance)&#10;    {&#10;        var hapticController = __instance.GetComponent&lt;AlarmClockHapticController&gt;();&#10;        if (hapticController != null)&#10;        {&#10;            hapticController.StartHapticLoop();&#10;        }&#10;    }&#10;    &#10;    [HarmonyPatch(&quot;TurnOff&quot;)]&#10;    [HarmonyPostfix]&#10;    public static void TurnOffPostfix(Assets.Scripts.Props.AlarmClock __instance)&#10;    {&#10;        var hapticController = __instance.GetComponent&lt;AlarmClockHapticController&gt;();&#10;        if (hapticController != null)&#10;        {&#10;            hapticController.StopHapticLoop();&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>